from Sphincs require "generic/conditions.jinc"
from Sphincs require "fips202/common/fips202_common.jinc"
from Sphincs require "fips202/shake256_ptr/keccak1600.jinc"
////////////////////////////////// INIT //////////////////////////////////

inline fn __keccak_inc_init(reg ptr u64[26] state) -> reg ptr u64[26] {
  inline int i;
  reg u64 t;

  ?{}, t = #set0();

  for i = 0 to 26 { state[i] = t; }

  return state;
}

fn __shake256_inc_init(reg ptr u64[26] state) -> reg ptr u64[26] {
  state = state;
  state = __keccak_inc_init(state);
  return state;
}

inline fn __shake256_inc_init_(
  reg ptr u64[26] state
) -> reg ptr u64[26]
{
  state = state;
  state = __shake256_inc_init(state);
  state = state;
  return state;
}

////////////////////////////////// ABSORB ////////////////////////////////
inline fn __keccak_inc_absorb(
  reg ptr u64[26] state,
  reg u64 in,
  reg u64 inlen,
  inline int rate
) -> reg ptr u64[26]
{
  reg u64 i;
  reg u64 offset_in;
  
  reg u64 t u v;
  reg u64 z; 
  stack u64 bytes; // TODO: Make this a reg

  stack u64 s_inlen s_in s_i s_offset_in s_t s_u s_v s_z;

  reg ptr u64[25] non_absorbed_byes;

  offset_in = 0;

  #declassify bytes = state[25];
  t = inlen;
  t += bytes; // t holds the value of inlen + state[25]

  while (t >=u rate) {
    i = 0;

    #declassify bytes = state[25];
    t = rate;
    t -= bytes;

    while (i < t) {
      // s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
      #declassify t = state[25];
      t += i;

      u = t;
      t >>= (3 & 63); // index: s_inc[25] + i) >> 3

      u &= 0x07;
      ?{}, u = #SHL(u, 3);

      z = in;
      z += offset_in;
      z += i;

      #declassify v = (64u) (u8) [z]; // TODO: FIXME: I think this is not public
      v <<= (u & 63);

      state[t] ^= v;

      // t : (state[25] + i) >> 3
      // u : 8 * ((state[25] + i) & 0x07)
      // z : i (after adjsuting for offset)
      // v : (uint64_t) in[i] << (8 * ((state[25] + i) & 0x07))

      t = rate;
      #declassify bytes = state[25];
      t -= bytes;

      i += 1;
    }

    t = rate;
    t -= state[25];
    inlen -= t;      // mlen -= (size_t)(r - s_inc[25]);
    offset_in += t;  // m += r - s_inc[25];

    state[25] = 0;

    //////////////////// PERMUTE STATE //////////////////////////////////////
    s_in = in;
    s_inlen = inlen;
    s_i = i;
    s_offset_in = offset_in;
    s_t = t;
    s_u = u;
    s_v = v;
    s_z = z;

    non_absorbed_byes = state[0:25];
    non_absorbed_byes = _keccakf1600_ref1(non_absorbed_byes);
    state[0:25] = non_absorbed_byes;

    in = s_in;
    inlen = s_inlen;
    i = s_i;
    offset_in = s_offset_in;
    u = s_u;
    v = s_v;
    z = s_z;
    //////////////////// PERMUTE STATE //////////////////////////////////////

    // To compute the loop condition
    t = inlen;
    t += state[25]; // // t holds the value of inlen + state[25]
  }

  // second for loop
  i = 0;
  while (i < inlen) {
    // s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    t = state[25];
    t += i;
    t >>= (3 & 63); // index: s_inc[25] + i) >> 3

    u = state[25]; // TODO: replace with u = t
    u += i;        // TODO: replace with u = t
    u &= 0x07;
    ?{}, u = #SHL(u, 3);

    z = in;
    z += offset_in;
    z += i;

    #declassify v = (64u) (u8) [z];
    v <<= (u & 63);

    state[t] ^= v;

    // t : (state[25] + i) >> 3
    // u : 8 * ((state[25] + i) & 0x07)
    // z : i (after adjsuting for offset)
    // v : (uint64_t) in[i] << (8 * ((state[25] + i) & 0x07))

    i += 1;
  }

  state[25] += inlen;

  return state;
}

#[returnaddress="stack"]
fn _shake256_inc_absorb(
  reg ptr u64[26] state,
  reg u64 in,
  reg u64 inlen
) -> reg ptr u64[26]
{
  inline int rate;

  rate = (1088/8); // = 136

  state = __keccak_inc_absorb(state, in, inlen, rate);
  return state;
}

inline fn __shake256_inc_absorb_(
  reg ptr u64[26] state,
  reg u64 in,
  reg u64 inlen
) -> reg ptr u64[26]
{
  state = state;
  in = in;
  inlen = inlen;

  state = _shake256_inc_absorb(state, in, inlen);

  state = state;
  in = in;
  inlen = inlen;

  return state;
}
////////////////////////////////// FINALIZE //////////////////////////////

inline fn __keccak_inc_finalize(
  reg ptr u64[26] state,
  reg u64 rate,
  reg u8 trail_byte)
  ->
  reg ptr u64[26]
{
  reg u64 index;

  // After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
  // so we can always use one more byte for trail_byte in the current state.
    // s_inc[s_inc[25] >> 3] ^= (uint64_t)trail_byte << (8 * (s_inc[25] & 0x07));
    // s_inc[(rate - 1) >> 3] ^= (uint64_t)128 << (8 * ((rate - 1) & 0x07));
    // s_inc[25] = 0;

  index = state[25];
  state[u8 index] ^= trail_byte;

  index = rate - 1; // register renaming
  state[u8 index] ^= 0x80;

  state[25] = 0;

  return state;
}

inline fn __shake256_inc_finalize(
  reg ptr u64[26] state
) -> reg ptr u64[26]
{
  reg u64 rate;
  reg u8 trail_byte;

  rate = (1088/8); // = 136
  trail_byte = 0x1F;

  state = __keccak_inc_finalize(state, rate, trail_byte);
  return state;
}


// SQUEEZE /////////////////////////////////////////////////////////////////////
inline fn __keccak_inc_squeeze_copy_from_state(
  reg u64 out,
  reg u64 outlen,
  reg u64 limit,
  reg ptr u64[26] state,
  reg u64 offset)
  ->
  reg u64,
  reg u64,
  reg u64
{
  reg u64 i index;
  reg u8 value;
  reg bool cond;

  i = 0;
  while { cond = __cond_u64_a_below_b_and_a_below_c(i, outlen, limit); } (cond)
  {
    value = state[u8 offset];
    (u8)[out + i] = value;
    offset += 1;
    i += 1;
  }

  out += i;
  outlen -= i;
  index = limit - i; // register renaming

  return index, out, outlen;
}

inline fn __keccak_inc_squeeze_(
  reg u64 out,
  reg u64 outlen,
  reg ptr u64[26] state,
  reg u64 rate)
  ->
  reg ptr u64[26]
{
  reg u64 limit offset index;
  stack u64 s_out s_outlen s_rate;

  reg ptr u64[25] non_absorbed_byes;

  // first consume any bytes we still have sitting around
  limit = state[25];
  offset = rate;
  offset -= state[25];

  index, out, outlen = __keccak_inc_squeeze_copy_from_state(out, outlen, limit, state, offset);

  state[25] = index;

  // then squeeze the remaining necessary blocks
  s_rate = rate;

  while( outlen > 0 )
  {
     s_out = out;
     s_outlen = outlen;

    non_absorbed_byes = state[0:25];
    non_absorbed_byes = _keccakf1600_ref1(non_absorbed_byes);
    state[0:25] = non_absorbed_byes;

    out = s_out;
    outlen = s_outlen;
    limit = s_rate;
    offset = 0;

    index, out, outlen = __keccak_inc_squeeze_copy_from_state(out, outlen, limit, state, offset);

    state[25] = index;
  }

  return state;
}

// #[returnaddress="stack"]
inline fn __shake256_inc_squeeze(
  reg u64 out,
  reg u64 outlen,
  reg ptr u64[26] state
) -> reg ptr u64[26]
{
  reg u64 rate;

  rate = (1088/8); // = 136

  state = __keccak_inc_squeeze_(out, outlen, state, rate);

  return state;
}//<>


/// ABSORB WITH TEMPLATES //////////////////////////////////////
inline fn __keccak_inc_absorb_t<INLEN>(
  reg ptr u64[26] state,
  reg ptr u8[INLEN] in,
  inline int rate
) -> reg ptr u64[26]
{
  reg u64 i inlen offset_in;

  reg u64 t u v z;

  stack u64 s_inlen s_i s_offset_in s_t s_u s_v s_z;
  stack ptr u8[INLEN] s_in;

  reg ptr u64[25] non_absorbed_byes;

  offset_in = 0;
  inlen = INLEN;

  t = inlen;
  t += state[25]; // // t holds the value of inlen + state[25]

  while (t >=u rate) {
    i = 0;

    t = rate;
    t -= state[25];

    while (i < t) {
      // s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
      t = state[25];
      t += i;

      u = t;
      t >>= (3 & 63); // index: s_inc[25] + i) >> 3

      u &= 0x07;
      ?{}, u = #SHL(u, 3);

      // z = in;
      // z += offset_in;
      // z += i;
      z = offset_in;
      z += i;

      v = (64u) in[z];
      v <<= (u & 63);

      state[ t] ^= v;

      // t : (state[25] + i) >> 3
      // u : 8 * ((state[25] + i) & 0x07)
      // z : i (after adjsuting for offset)
      // v : (uint64_t) in[i] << (8 * ((state[25] + i) & 0x07))

      t = rate;
      t -= state[25];

      i += 1;
    }

    t = rate;
    t -= state[25];
    inlen -= t;      // mlen -= (size_t)(r - s_inc[25]);
    offset_in += t;  // m += r - s_inc[25];

    state[25] = 0;

    //////////////////// PERMUTE STATE //////////////////////////////////////
    s_in = in;
    s_inlen = inlen;
    s_i = i;
    s_offset_in = offset_in;
    s_t = t;
    s_u = u;
    s_v = v;
    s_z = z;

    non_absorbed_byes = state[0:25];
    non_absorbed_byes = _keccakf1600_ref1(non_absorbed_byes);
    state[0:25] = non_absorbed_byes;

    in = s_in;
    inlen = s_inlen;
    i = s_i;
    offset_in = s_offset_in;
    u = s_u;
    v = s_v;
    z = s_z;
    //////////////////// PERMUTE STATE //////////////////////////////////////

    // To compute the loop condition
    t = inlen;
    t += state[25]; // // t holds the value of inlen + state[25]
  }

  // second for loop
  i = 0;
  while (i < inlen) {
    // s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
    t = state[25];
    t += i;
    t >>= (3 & 63); // index: s_inc[25] + i) >> 3

    u = state[25]; // TODO: replace with u = t
    u += i;        // TODO: replace with u = t
    u &= 0x07;
    ?{}, u = #SHL(u, 3);

    // z = in;
    // z += offset_in;
    // z += i;
    z = offset_in;
    z += i;

    v = (64u) in[z];
    v <<= (u & 63);

    state[ t] ^= v;

    // t : (state[25] + i) >> 3
    // u : 8 * ((state[25] + i) & 0x07)
    // z : i (after adjsuting for offset)
    // v : (uint64_t) in[i] << (8 * ((state[25] + i) & 0x07))

    i += 1;
  }

  state[25] += inlen;

  return state;
}//<>

#[returnaddress="stack"]
fn _shake256_inc_absorb_t<INLEN>(
  reg ptr u64[26] state,
  reg ptr u8[INLEN] in
) -> reg ptr u64[26]
{
  inline int rate;

  rate = (1088/8); // = 136

  state = __keccak_inc_absorb_t<INLEN>(state, in, rate);
  return state;
}//<>

inline fn __shake256_inc_absorb_t<INLEN>(
  reg ptr u64[26] state,
  reg ptr u8[INLEN] in
) -> reg ptr u64[26]
{
  state = state;
  in = in;

  state = _shake256_inc_absorb_t<INLEN>(state, in);

  state = state;
  in = in;

  return state;
}//<>

/// SQUEEZE WITH TEMPLATES ///////////////////////////////
inline fn __keccak_inc_squeeze_copy_from_state_t<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 outlen,
  reg u64 limit,
  reg ptr u64[26] state,
  reg u64 offset_state,
  reg u64 offset_out)
  ->
  reg u64,
  reg ptr u8[OUTLEN],
  reg u64,
  reg u64
{
  reg u64 i index z;
  reg u8 value;
  reg bool cond;

  i = 0;
  while { cond = __cond_u64_a_below_b_and_a_below_c(i, outlen, limit); } (cond)
  {
    value = state[u8 offset_state];

    z = offset_out;
    z += i;
    out[z] = value;
    offset_state += 1;
    i += 1;
  }

  offset_out += i;
  outlen -= i;
  index = limit - i; // register renaming

  return index, out, outlen, offset_out;
}//<>

inline fn __keccak_inc_squeeze_t<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg ptr u64[26] state,
  reg u64 rate
) -> reg ptr u8[OUTLEN], reg ptr u64[26]
{
  reg u64 limit  index outlen;
  reg u64 offset_state offset_out;
  stack u64 s_outlen s_rate s_offset_out;
  stack ptr u8[OUTLEN] s_out;

  reg ptr u64[25] non_absorbed_byes;
  
  outlen = OUTLEN;
  offset_out = 0;

  // first consume any bytes we still have sitting around
  limit = state[25];
  offset_state = rate;
  offset_state -= state[25];

  index, out, outlen, offset_out = __keccak_inc_squeeze_copy_from_state_t<OUTLEN>(out, outlen, 
                                                                                  limit, state, 
                                                                                  offset_state, 
                                                                                  offset_out);

  state[25] = index;

  // then squeeze the remaining necessary blocks
  s_rate = rate;

  while( outlen > 0 )
  {
    s_out = out;
    s_outlen = outlen;
    s_offset_out = offset_out;


    non_absorbed_byes = state[0:25];
    non_absorbed_byes = _keccakf1600_ref1(non_absorbed_byes);
    state[0:25] = non_absorbed_byes;

    out = s_out;
    outlen = s_outlen;
    limit = s_rate;
    offset_state = 0;
    offset_out = s_offset_out;

    index, out, outlen, offset_out = __keccak_inc_squeeze_copy_from_state_t<OUTLEN>(out, outlen, 
                                                                                    limit, state, 
                                                                                    offset_state, 
                                                                                    offset_out);

    state[25] = index;
  }

  return out, state;
}//<>

inline fn __shake256_inc_squeeze_t<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg ptr u64[26] state
) -> reg ptr u8[OUTLEN], reg ptr u64[26]
{
  reg u64 rate;

  rate = (1088/8); // = 136

  out, state = __keccak_inc_squeeze_t<OUTLEN>(out, state, rate);

  return out, state;
}//<>

from Sphincs require "address/address.jinc"
from Sphincs require "generic/utils.jtmpl"
from Sphincs require "wots/wots.jtmpl"

inline fn __merkle_sign(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig,
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg mut ptr u32[8] wots_addr tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES], reg ptr u8[SPX_N]
{
  // stack u8[SPX_TREE_HEIGHT * SPX_N] auth_path;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N] auth_path_p;

  // struct leaf_info
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig;
  reg u32 wots_sign_leaf;
  stack u32[SPX_WOTS_LEN] steps;
  // reg ptr u32[SPX_WOTS_LEN] steps_p;
  stack u32[8] leaf_addr pk_addr;
  // reg ptr u32[8] leaf_addr_p pk_addr_p;


  auth_path_p = sig[SPX_WOTS_BYTES : SPX_TREE_HEIGHT * SPX_N];

  wots_sig = sig;
  steps = __chain_lengths<SPX_N>(steps, root);

  tree_addr = __set_type(tree_addr, SPX_ADDR_TYPE_HASHTREE);
  leaf_addr = __copy_subtree_addr(leaf_addr, wots_addr);
  pk_addr = __copy_subtree_addr(pk_addr, wots_addr);
  
  wots_sign_leaf = idx_leaf;

  // TODO: Call to thash and return
  return sig, root;
}//<>

/* Compute root node of the top-most subtree. */
inline fn __merkle_gen_root(
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed
) -> reg ptr u8[SPX_N]
{
  stack u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path_p;

  stack u32[8] top_tree_addr wots_addr;
  reg ptr u32[8] top_tree_addr_p wots_addr_p;

  reg u32 t;

  top_tree_addr_p = top_tree_addr;
  top_tree_addr_p = __zero_array_u32<8>(top_tree_addr_p);

  wots_addr_p = wots_addr;
  wots_addr_p = __zero_array_u32<8>(wots_addr_p);

  top_tree_addr = __set_layer_addr(top_tree_addr, SPX_D - 1);
  wots_addr_p = __set_layer_addr(top_tree_addr, SPX_D - 1);

  t = 0;
  t = #NOT_32(t); // one's complement
  auth_path, root = __merkle_sign(auth_path, root, pub_seed, sk_seed, wots_addr_p, top_tree_addr_p, t);

  return root;
}

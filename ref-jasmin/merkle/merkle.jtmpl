from Sphincs require "address/address.jinc"
from Sphincs require "generic/utils.jtmpl"
from Sphincs require "wots/wots.jtmpl"
from Sphincs require "wotsx1/wotsx1.jtmpl"

inline fn __merkle_sign(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig, // auth path
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
     reg ptr u8[SPX_N], 
     reg ptr u32[8]
{
  stack u32[SPX_WOTS_LEN] steps;
  reg ptr u32[SPX_WOTS_LEN] steps_p;

  reg u32 wots_sign_leaf;

  stack u32[8] leaf_addr;
  reg ptr u32[8] leaf_addr_p;

  stack u32[8] pk_addr;
  reg ptr u32[8] pk_addr_p;

  reg u32 type;
  reg u64 offset t;

  // struct leaf_info_x1 info = { 0 };
  // NOTE:
  // struct leaf_info_x1 {
  //   unsigned char *wots_sig;
  //   uint32_t wots_sign_leaf;
  //   uint32_t *wots_steps;
  //   uint32_t leaf_addr[8];
  //   uint32_t pk_addr[8];
  // };
  leaf_addr_p = leaf_addr; pk_addr_p = pk_addr;
  leaf_addr_p = __zero_array_u32<8>(leaf_addr_p);
  pk_addr_p = __zero_array_u32<8>(pk_addr_p);

  // chain_lengths(steps, root);
  // info.wots_steps = steps;
  steps_p = steps;
  steps_p = __chain_lengths(steps_p, root);

  // set_type(&tree_addr[0], SPX_ADDR_TYPE_HASHTREE);
  type = SPX_ADDR_TYPE_HASHTREE;
  tree_addr = __set_type(tree_addr, type);

  // set_type(&info.pk_addr[0], SPX_ADDR_TYPE_WOTSPK);
  type = SPX_ADDR_TYPE_WOTSPK;
  pk_addr_p = __set_type(pk_addr_p, type);

  // copy_subtree_addr(&info.leaf_addr[0], wots_addr);
  leaf_addr_p = __copy_subtree_addr(leaf_addr_p, wots_addr);

  // copy_subtree_addr(&info.pk_addr[0], wots_addr);
  pk_addr_p = __copy_subtree_addr(pk_addr_p, wots_addr);

  // info.wots_sign_leaf = idx_leaf;
  wots_sign_leaf = idx_leaf;

  // treehashx1(root, auth_path, ctx, idx_leaf, 0, SPX_TREE_HEIGHT, wots_gen_leafx1, tree_addr, &info);  
  root, tree_addr, sig, leaf_addr, pk_addr = __treehash_wots(root, pub_seed, sk_seed, 
                                                             idx_leaf, tree_addr, sig, wots_sign_leaf, 
                                                             steps_p, leaf_addr, pk_addr);
  return sig, root, tree_addr;
}

#[returnaddress="stack"]
fn _merkle_sign(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig,
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
     reg ptr u8[SPX_N], 
     reg ptr u32[8]
{
  sig, root, tree_addr = __merkle_sign(sig, root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);
  return sig, root, tree_addr;
}

inline fn __merkle_sign_(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig,
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
     reg ptr u8[SPX_N], 
     reg ptr u32[8]
{
  () = #spill(root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);

  () = #unspill(root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);

  sig, root, tree_addr = _merkle_sign(sig, root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);

  sig = sig;
  root = root;
  tree_addr = tree_addr;

  return sig, root, tree_addr;
}

inline fn __merkle_gen_root(
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed
) -> reg ptr u8[SPX_N]
{
  stack u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path_p;

  stack u32[8] top_tree_addr; 
  reg ptr u32[8] top_tree_addr_p; 
  
  stack u32[8] wots_addr;
  reg ptr u32[8] wots_addr_p;

  reg u32 addr t;
  inline int i;

  // uint32_t top_tree_addr[8] = {0};
  // uint32_t wots_addr[8] = {0};

  ?{}, t = #set0_32();

  top_tree_addr_p = top_tree_addr;
  wots_addr_p = wots_addr;

  for i=0 to 8 { top_tree_addr_p[i] = t; wots_addr_p[i] = t; i+=1; }

  // set_layer_addr(top_tree_addr, SPX_D - 1);
  addr = SPX_D - 1;
  top_tree_addr_p = __set_layer_addr(top_tree_addr_p, addr);
  
  // set_layer_addr(wots_addr, SPX_D - 1);
  wots_addr_p = __set_layer_addr(wots_addr_p, addr);

  // merkle_sign(auth_path, root, ctx, wots_addr, top_tree_addr, (uint32_t)~0);
  auth_path_p = auth_path;
  t = #NOT_32(t);
  
  auth_path_p, root, top_tree_addr_p = _merkle_sign(auth_path_p, root, pub_seed, sk_seed, wots_addr_p, top_tree_addr_p, t);

  return root;
}

#[returnaddress="stack"]
fn _merkle_gen_root(
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed
) -> reg ptr u8[SPX_N]
{
  root = __merkle_gen_root(root, pub_seed, sk_seed);
  return root;
}

from Sphincs require "address/address.jinc"
from Sphincs require "generic/utils.jtmpl"
from Sphincs require "wots/wots.jtmpl"
from Sphincs require "wotsx1/wotsx1.jtmpl"

inline fn __merkle_sign(
  reg u64 sig,
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  reg u64 wots_sig;
  stack u64 auth_path;

  stack u32[SPX_WOTS_LEN] steps;
  reg ptr u32[SPX_WOTS_LEN] steps_p;

  reg u32 wots_sign_leaf;

  stack u32[8] leaf_addr;
  reg ptr u32[8] leaf_addr_p;

  stack u32[8] pk_addr;
  reg ptr u32[8] pk_addr_p;

  reg u32 type;
  reg u64 offset t;

  // unsigned char *auth_path = sig + SPX_WOTS_BYTES;
  auth_path = sig;
  auth_path += SPX_WOTS_BYTES;
  
  // struct leaf_info_x1 info = { 0 };
  // NOTE:
  // struct leaf_info_x1 {
  //   unsigned char *wots_sig;
  //   uint32_t wots_sign_leaf;
  //   uint32_t *wots_steps;
  //   uint32_t leaf_addr[8];
  //   uint32_t pk_addr[8];
  // };
  leaf_addr_p = leaf_addr; pk_addr_p = pk_addr;
  leaf_addr_p = __zero_array_u32<8>(leaf_addr_p);
  pk_addr_p = __zero_array_u32<8>(pk_addr_p);

  // info.wots_sig = sig;
  wots_sig = sig;

  // chain_lengths(steps, root);
  // info.wots_steps = steps;
  steps_p = steps;
  steps_p = __chain_lengths(steps_p, root);
  steps = steps_p;

  // set_type(&tree_addr[0], SPX_ADDR_TYPE_HASHTREE);
  type = SPX_ADDR_TYPE_HASHTREE;
  tree_addr = __set_type(tree_addr, type);

  // set_type(&info.pk_addr[0], SPX_ADDR_TYPE_WOTSPK);
  type = SPX_ADDR_TYPE_WOTSPK;
  pk_addr_p = __set_type(pk_addr_p, type);

  // copy_subtree_addr(&info.leaf_addr[0], wots_addr);
  leaf_addr_p = __copy_subtree_addr(leaf_addr_p, wots_addr);

  // copy_subtree_addr(&info.pk_addr[0], wots_addr);
  pk_addr_p = __copy_subtree_addr(pk_addr_p, wots_addr);

  // info.wots_sign_leaf = idx_leaf;
  wots_sign_leaf = idx_leaf;

  // treehashx1(root, auth_path, ctx, idx_leaf, 0, SPX_TREE_HEIGHT, wots_gen_leafx1, tree_addr, &info);  
  steps_p = steps;
  // root, tree_addr, leaf_addr, pk_addr = __treehash_wots(root, auth_path, pub_seed, sk_seed, 
  //                                                       idx_leaf, tree_addr, wots_sig, wots_sign_leaf, 
  //                                                       steps_p, leaf_addr, pk_addr);

  return root, tree_addr;
}

#[returnaddress="stack"]
fn _merkle_sign(
  reg u64 sig,
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  root, tree_addr = __merkle_sign(sig, root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);
  return root, tree_addr;
}

inline fn __merkle_sign_(
  reg u64 sig,
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  () = #spill(root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);

  () = #unspill(root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);

  root, tree_addr = _merkle_sign(sig, root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);

  root = root;
  tree_addr = tree_addr;

  return root, tree_addr;
}


from Sphincs require "address/address.jinc"
from Sphincs require "generic/utils.jtmpl"
from Sphincs require "wots/wots.jtmpl"
from Sphincs require "wotsx1/wotsx1.jtmpl"

inline fn __merkle_sign(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig, // auth_path
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES], 
     reg ptr u8[SPX_N],
     reg ptr u32[8]
{
  stack ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] s_sig;
  stack ptr u8[SPX_N] s_root;
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u8[SPX_N] s_sk_seed;
  stack ptr u32[8] s_wots_addr s_tree_addr;
  stack u32 s_idx_leaf;

  stack u32[SPX_WOTS_LEN] steps;
  reg ptr u32[SPX_WOTS_LEN] steps_p;

  // struct leaf_info
  stack u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig_p;

  reg u32 wots_sign_leaf;
  stack u32[8] leaf_addr pk_addr;
  // stack u32[SPX_WOTS_LEN] wots_steps; // TODO: WE DO NOT NEED   THIS VARIABLKE I THINk
  // struct leaf info

  reg u32 type;
  reg u64 offset;

  reg ptr u8[SPX_TREE_HEIGHT * SPX_N] buf;

  leaf_addr = __zero_array_u32<8>(leaf_addr);
  pk_addr = __zero_array_u32<8>(pk_addr);

  // Spill
  s_sig = sig;
  s_root = root;
  s_pub_seed = pub_seed;
  s_sk_seed = sk_seed;
  s_wots_addr = wots_addr;
  s_tree_addr = tree_addr;
  s_idx_leaf = idx_leaf;

  // info.wots_sig = sig;
  // Note: In the end [i.e. after wots_sig is updated], we have to memcpy back to sig
  wots_sig_p = wots_sig;
  offset = 0;
  wots_sig_p, _ = _x_memcpy_u8u8<SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES, SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES>(wots_sig_p, offset, sig);
  wots_sig = wots_sig_p;

  // NOTE: Nao deveria ser preciso um memcpy. EM C basta fazer wots_sig = sig. Mas em Jasmin isto provoca
  // compilation error in function merkle_gen_root_jazz:
  // stack allocation: the region associated to variable s_wots_sig
  // TODO: FIXME: TODO: FIXME: Rever isto no fim

  // chain_lengths(steps, root);
  steps_p = steps;
  steps_p = __chain_lengths(steps_p, root);
  steps = steps_p;

  // info.wots_steps = steps; [This step is not needed I think]
  // wots_steps = steps;

  // set_type(&tree_addr[0], SPX_ADDR_TYPE_HASHTREE);
  tree_addr = s_tree_addr;
  type = SPX_ADDR_TYPE_HASHTREE;
  tree_addr = __set_type(tree_addr, type);
  s_tree_addr = tree_addr;

  // set_type(&info.pk_addr[0], SPX_ADDR_TYPE_WOTSPK);
  type = SPX_ADDR_TYPE_WOTSPK;
  pk_addr = __set_type(pk_addr, type);

  // copy_subtree_addr(&info.leaf_addr[0], wots_addr);
  leaf_addr = __copy_subtree_addr(leaf_addr, wots_addr);

  // copy_subtree_addr(&info.pk_addr[0], wots_addr);
  pk_addr = __copy_subtree_addr(pk_addr, wots_addr);

  // info.wots_sign_leaf = idx_leaf;
  wots_sign_leaf = s_idx_leaf;

  idx_leaf = s_idx_leaf; // This should be live (no need to retrieve it from the stack ?)
  buf = sig[SPX_WOTS_BYTES:SPX_TREE_HEIGHT * SPX_N];
  tree_addr = s_tree_addr; // This should be live (no need to retrieve it from the stack ?)
  root, buf, tree_addr, wots_sig_p, leaf_addr, pk_addr = 
    __treehash_wots(root, 
                    buf, 
                    pub_seed, sk_seed, 
                    idx_leaf, tree_addr, 
                    wots_sig, 
                    wots_sign_leaf, 
                    steps, 
                    leaf_addr, 
                    pk_addr);
  sig[SPX_WOTS_BYTES:SPX_TREE_HEIGHT * SPX_N] = buf;

  return sig, root, tree_addr;
}

#[returnaddress="stack"]
fn _merkle_sign(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig, // auth_path
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES], 
     reg ptr u8[SPX_N],
     reg ptr u32[8]
{
  sig, root, tree_addr = __merkle_sign(sig, root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);
  return sig, root, tree_addr;
}

inline fn __merkle_sign_(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig, // auth_path
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] wots_addr,
  reg ptr u32[8] tree_addr,
  reg u32 idx_leaf
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES], 
     reg ptr u8[SPX_N],
     reg ptr u32[8]
{
  stack ptr u8[SPX_N] s_root;
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u8[SPX_N] s_sk_seed;
  stack ptr u32[8] s_wots_addr;
  stack ptr u32[8] s_tree_addr;
  stack u32 s_idx_leaf;

  // Spill
  s_root = root;
  s_pub_seed = pub_seed;
  s_sk_seed = sk_seed;
  s_wots_addr = wots_addr;
  s_tree_addr = tree_addr;
  s_idx_leaf = idx_leaf;


  // Unspill
  root = s_root;
  pub_seed = s_pub_seed;
  sk_seed = s_sk_seed;
  wots_addr = s_wots_addr;
  tree_addr = s_tree_addr;
  idx_leaf = s_idx_leaf;

  sig, root, tree_addr = _merkle_sign(sig, root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);

  sig = sig;
  root = root;
  tree_addr = tree_addr;

  return sig, root, tree_addr;
}

inline fn __merkle_gen_root(
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed
) -> reg ptr u8[SPX_N]
{
  stack u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path_p;

  stack u32[8] top_tree_addr; 
  reg ptr u32[8] top_tree_addr_p; 
  
  stack u32[8] wots_addr;
  reg ptr u32[8] wots_addr_p;

  reg u32 t;
  reg u32 addr;
  inline int i;
  
  ?{}, t = #set0_32();

  top_tree_addr_p = top_tree_addr;
  wots_addr_p = wots_addr;

  for i=0 to 8 {
    top_tree_addr_p[i] = t;
    wots_addr_p[i] = t;
  }

  addr = SPX_D - 1;
  top_tree_addr_p = __set_layer_addr(top_tree_addr_p, addr);
  wots_addr_p = __set_layer_addr(wots_addr_p, addr);
  
  auth_path_p = auth_path;
  t = #NOT_32(t);
  _, root, _ = _merkle_sign(auth_path_p, root, pub_seed, sk_seed, wots_addr_p, top_tree_addr_p, t);

  return root;
}

#[returnaddress="stack"]
fn _merkle_gen_root(
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed
) -> reg ptr u8[SPX_N]
{
  root = __merkle_gen_root(root, pub_seed, sk_seed);
  return root;
}
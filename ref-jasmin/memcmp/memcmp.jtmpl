// ARRAY

inline fn __memcmp<INLEN>(
  reg ptr u8[INLEN] a,
  reg ptr u8[INLEN] b,
  reg u64 r
) -> reg u64 
{
  reg u64 i;
  reg u64 are_equal;
  reg u8 t acc;
  reg bool zf;

  r = -1;

  are_equal = 0;
  acc = 0;
  
  i = 0;
  while (i < INLEN)
  {
    t = a[(int) i];
    t ^= b[(int) i];
    acc |= t;
    i += 1;
  }

  (_, _, _, _, zf, _) = #AND_8(acc, acc);
  r = are_equal if zf;

  return r;
}//<>

// FIXME: Preprocessor bug: without this annotations the preprocessor fails
#[returnaddress="stack"]
fn _memcmp<INLEN>(
  reg ptr u8[INLEN] a,
  reg ptr u8[INLEN] b,
  reg u64 r
) -> reg u64 
{
  r = __memcmp<INLEN>(a, b, r);
  return r;
}//<>

inline fn __memcmp(reg u64 a b n r) -> reg u64 
{ 
  reg u64 i;
  reg u64 are_equal;
  reg u8 t acc;
  reg bool zf;

  r = -1;

  are_equal = 0;
  acc = 0;
  
  i = 0;
  while (i < n) {
    t =  (u8) [a + i];
    t ^= (u8) [b + i];
    acc |= t;
    i += 1;
  }

  (_, _, _, _, zf, _) = #AND_8(acc, acc);
  r = are_equal if zf;
    
  return r;
}

fn _memcmp(reg u64 a b n r) -> reg u64 
{
  r = __memcmp(a, b, n, r);
  return r;
}
from Sphincs require "wots/wots.jtmpl"
from Sphincs require "generic/utils.jtmpl"

inline fn __load_ctx(
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u64 addr
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  pub_seed = __load_u8_array<SPX_N>(pub_seed, addr);
  addr += SPX_N;
  sk_seed = __load_u8_array<SPX_N>(sk_seed, addr);
  return pub_seed, sk_seed;
}

export fn gen_chain_jazz(
  reg  u64 _out in _start _steps _pub_seed _addr
)
{
  stack u8[SPX_N] out;
  stack u8[SPX_N] pub_seed;
  stack u32[8] addr;

  reg u32 start steps;

  stack u64 s_out s_start s_steps s_pub_seed s_addr;

  // Spill everything (start from clean state)
  s_out = _out;
  s_start = _start;
  s_steps = _steps;
  s_pub_seed = _pub_seed;
  s_addr = _addr;

  _out = s_out;
  out = __load_u8_array<SPX_N>(out, _out);

  _start = s_start;
  start = (32u) _start;
  steps = (32u) _steps;

  _pub_seed = s_pub_seed;
  pub_seed = __load_u8_array<SPX_N>(pub_seed, _pub_seed);

  _addr = s_addr;
  addr = __load_u32_array<8>(addr, _addr);

  out, addr = __gen_chain_(out, in, start, steps, pub_seed, addr);

  // Unspill
  _out = s_out;
  _addr = s_addr;
 
  __store_u8_array<SPX_N>(out, _out);
  __store_u32_array<8>(addr, _addr);
}//<>

export fn wots_checksum_jazz(reg u64 _csum_base_w _msg_base_w) 
{
  stack u32[SPX_WOTS_LEN2] csum_base_w;
  stack u32[SPX_WOTS_LEN] msg_base_w;

  reg ptr u32[SPX_WOTS_LEN2] csum_base_w_p;
  reg ptr u32[SPX_WOTS_LEN] msg_base_w_p;

  stack u64 s_csum_base_w s_msg_base_w;

  csum_base_w_p = csum_base_w;
  csum_base_w_p = __load_u32_array<SPX_WOTS_LEN2>(csum_base_w_p, _csum_base_w);

  msg_base_w_p = msg_base_w;
  msg_base_w_p = __load_u32_array<SPX_WOTS_LEN>(msg_base_w_p, _msg_base_w);

  s_csum_base_w = _csum_base_w;  // spill

  csum_base_w_p = __wots_checksum(csum_base_w_p, msg_base_w_p);

  _csum_base_w = s_csum_base_w; // unspill

  __store_u32_array<SPX_WOTS_LEN2>(csum_base_w_p, _csum_base_w);
}

export fn chain_lengths_jazz(reg u64 _lengths _msg)
{
  stack u32[SPX_WOTS_LEN] lengths;
  stack u8[SPX_N] msg;

  reg ptr u32[SPX_WOTS_LEN] lengths_p;
  reg ptr u8[SPX_N] msg_p;

  stack u64 s_lengths s_msg;

  lengths_p = lengths;
  lengths_p = __load_u32_array<SPX_WOTS_LEN>(lengths_p, _lengths);
    
  msg_p = msg;
  msg_p = __load_u8_array<SPX_N>(msg_p, _msg);

  s_lengths = _lengths; s_msg = _msg; // spill

  lengths_p = __chain_lengths(lengths_p, msg_p);
  msg =  msg_p;

  s_lengths = _lengths; // spill
  __store_u32_array<SPX_WOTS_LEN>(lengths_p, _lengths);
}

export fn wots_pk_from_sig_jazz(reg u64 _pk sig _msg _ctx _addr)
{
    stack u8[SPX_WOTS_BYTES] pk;
    stack u8[SPX_N] pub_seed;
    stack u8[SPX_N] msg; // root
    stack u32[8] addr;

    stack u64 s_pk s_sig s_msg s_ctx s_addr;

    // Spill everything (start from clean state)
    s_pk = _pk; 
    s_msg = _msg; 
    s_ctx = _ctx; 
    s_addr = _addr; 

    _pk = s_pk;
    pk = __load_u8_array<SPX_WOTS_BYTES>(pk, _pk);

    _msg = s_msg;
    msg = __load_u8_array<SPX_N>(msg, _msg);

    _ctx = s_ctx;
    pub_seed = __load_u8_array<SPX_N>(pub_seed, _ctx);

    _addr = s_addr;
    addr = __load_u32_array<8>(addr, _addr);

    s_pk = _pk; 
    s_addr = _addr;

    pk, addr = __wots_pk_from_sig(pk, sig, msg, pub_seed, addr);

    _pk = s_pk;     // unspill
    _addr = s_addr; // unspill

    __store_u8_array<SPX_WOTS_BYTES>(pk, _pk);
    __store_u32_array<8>(addr, _addr);
}

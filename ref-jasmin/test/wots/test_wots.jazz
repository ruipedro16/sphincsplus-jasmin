from Sphincs require "wots/wots.jtmpl"
from Sphincs require "generic/utils.jtmpl"

inline fn __load_ctx(
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u64 addr
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  inline int i;
  reg u8 t;

  for i = 0 to SPX_N {
    t = (u8)[addr + i];
    pub_seed[i] = t;

    t = (u8)[addr + SPX_N + i];
    sk_seed[i] = t;
  }

  return pub_seed, sk_seed;
}

export fn gen_chain_jazz(
  reg  u64 _out _in _start _steps _pub_seed _addr
)
{
  stack u8[SPX_N] out;
  stack u8[SPX_N] in;
  stack u8[SPX_N] pub_seed;
  stack u32[8] addr;

  reg u32 start steps;

  stack u64 s_out s_in s_start s_steps s_pub_seed s_addr;

  out = __load_u8_array<SPX_N>(out, _out);

  in = __load_u8_array<SPX_N>(in, _in);

  start = (u32) [_start];
  steps = (u32) [_steps];

  pub_seed = __load_u8_array<SPX_N>(pub_seed, _pub_seed);

  addr = __load_u32_array<8>(addr, _addr);

  // Spill
  s_out = _out;
  s_in = _in;
  s_start = _start;
  s_steps = _steps;
  s_pub_seed = _pub_seed;
  s_addr = _addr;

  out = out;
  in = in;
  start = start;
  steps = steps;
  pub_seed = pub_seed;
  addr = addr;

  out, addr = __gen_chain__(out, in, start, steps, pub_seed, addr);

  // Unspill
  _out = s_out;
  _addr = s_addr;
 
  __store_u8_array<SPX_N>(out, _out);
  __store_u32_array<8>(addr, _addr);
}//<>

export fn base_w_jazz<MSG_LEN>(reg u64 _lengths _msg)
{
  stack u32[SPX_WOTS_LEN] lengths;
  stack u8[MSG_LEN] msg;

  stack u64 s_lengths s_msg;

  lengths = __load_u32_array<SPX_WOTS_LEN>(lengths, _lengths);
  msg = __load_u8_array<MSG_LEN>(msg, _msg);

  s_lengths = _lengths; s_msg = _msg;

  lengths = __base_w<SPX_WOTS_LEN,MSG_LEN>(lengths, msg);

  _lengths = s_lengths;

  __store_u32_array<SPX_WOTS_LEN>(lengths, _lengths);
}//<>

export fn wots_checksum_jazz(
  reg u64 _csum_base_w _msg_base_w
) 
{
  stack u32[SPX_WOTS_LEN2] csum_base_w;
  stack u32[SPX_WOTS_LEN] msg_base_w;

  reg ptr u32[SPX_WOTS_LEN2] csum_base_w_p;
  reg ptr u32[SPX_WOTS_LEN] msg_base_w_p;

  stack u64 s_csum_base_w s_msg_base_w;

  csum_base_w_p = csum_base_w;
  csum_base_w_p = __load_u32_array<SPX_WOTS_LEN2>(csum_base_w_p, _csum_base_w);

  msg_base_w_p = msg_base_w;
  msg_base_w_p = __load_u32_array<SPX_WOTS_LEN>(msg_base_w_p, _msg_base_w);

  s_csum_base_w = _csum_base_w; s_msg_base_w = _msg_base_w; // spill

  csum_base_w_p = __wots_checksum(csum_base_w_p, msg_base_w_p);

  _csum_base_w = s_csum_base_w; // unspill

  __store_u32_array<SPX_WOTS_LEN2>(csum_base_w_p, _csum_base_w);
}

export fn wots_pk_from_sig_jazz<MSG_LEN>(reg u64 _pk _sig _msg _ctx _addr)
{
    stack u8[SPX_WOTS_BYTES] pk;
    stack u8[SPX_BYTES] sig;
    stack u8[SPX_N] pub_seed;
    stack u8[SPX_N] sk_seed;
    stack u8[MSG_LEN] msg;
    stack u32[8] addr;

    reg ptr u8[SPX_WOTS_BYTES] pk_p;
    reg ptr u8[SPX_BYTES] sig_p;
    reg ptr u8[SPX_N] pub_seed_p;
    reg ptr u8[SPX_N] sk_seed_p;
    reg ptr u8[MSG_LEN] msg_p;
    reg ptr u32[8] addr_p;

    stack u64 s_pk s_sig s_msg s_ctx s_addr;
    
    pk_p = pk;
    pk_p = __load_u8_array<SPX_WOTS_BYTES>(pk_p, _pk);

    sig_p = sig;
    sig_p = __load_u8_array<SPX_BYTES>(sig_p, _sig);

    msg_p = msg;
    msg_p = __load_u8_array<MSG_LEN>(msg_p, _msg);

    pub_seed_p = pub_seed; sk_seed_p = sk_seed;
    pub_seed_p, sk_seed_p = __load_ctx(pub_seed_p, sk_seed_p, _ctx);

    addr_p = addr;
    addr_p = __load_u32_array<8>(addr_p, _addr);

    s_pk = _pk; s_sig = _sig; s_msg = _msg; s_ctx = _ctx; s_addr = _addr; // spill
    pk_p, addr_p = __wots_pk_from_sig<MSG_LEN>(pk_p, sig_p, msg_p, pub_seed_p, sk_seed_p, addr_p);
    _pk = s_pk; _addr = s_addr; // unspill

    __store_u8_array<SPX_WOTS_BYTES>(pk_p, _pk);
    __store_u32_array<8>(addr_p, _addr);
}//<>

export fn chain_lengths_jazz<MSG_LEN>(reg u64 _lengths _msg)
{
  stack u32[SPX_WOTS_LEN] lengths;
  stack u8[MSG_LEN] msg;

  reg ptr u32[SPX_WOTS_LEN] lengths_p;
  reg ptr u8[MSG_LEN] msg_p;

  stack u64 s_lengths s_msg;

  lengths_p = lengths;
  lengths_p = __load_u32_array<SPX_WOTS_LEN>(lengths_p, _lengths);
    
  msg_p = msg;
  msg_p = __load_u8_array<MSG_LEN>(msg_p, _msg);

  s_lengths = _lengths; s_msg = _msg; // spill

  lengths_p = __chain_lengths<MSG_LEN>(lengths_p, msg_p);
  msg =  msg_p;

  s_lengths = _lengths; // spill
  __store_u32_array<SPX_WOTS_LEN>(lengths_p, _lengths);
}//<>

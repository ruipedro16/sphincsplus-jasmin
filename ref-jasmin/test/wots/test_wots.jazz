from Sphincs require "wots/wots.jtmpl"
from Sphincs require "generic/utils.jtmpl"

export fn gen_chain_jazz(
  reg  u64 _out in _start _steps _pub_seed _addr
)
{
  stack u8[SPX_N] out;
  stack u8[SPX_N] pub_seed;
  stack u32[8] addr;

  reg u32 start steps;

  () = #spill(_out, _start, _pub_seed, _addr);

  () = #unspill(_out);
  out = __load_u8_array<SPX_N>(out, _out);

  () = #unspill(_start);
  start = (32u) _start;
  steps = (32u) _steps;

  () = #unspill(_pub_seed);
  pub_seed = __load_u8_array<SPX_N>(pub_seed, _pub_seed);

  () = #unspill(_addr);
  addr = __load_u32_array<8>(addr, _addr);

  out, addr = __gen_chain(out, in, start, steps, pub_seed, addr);

  () = #unspill(_out, _addr);
 
  __store_u8_array<SPX_N>(out, _out);
  __store_u32_array<8>(addr, _addr);
}//<>

export fn base_w_jazz_out_WOTS_LEN2(
  reg ptr u32[SPX_WOTS_LEN2] out,
  reg ptr u8[(SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8] in
) -> reg ptr u32[SPX_WOTS_LEN2]
{
  out = __base_w<SPX_WOTS_LEN2, (SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8>(out, in);
  return out;
}

export fn base_w_jazz_out_WOTS_LEN1(
  reg ptr u32[SPX_WOTS_LEN1] out,
  reg ptr u8[SPX_N] in
) -> reg ptr u32[SPX_WOTS_LEN1]
{
  out = __base_w<SPX_WOTS_LEN1, SPX_N>(out, in);
  return out;
}

export fn wots_checksum_jazz(
  reg ptr u32[SPX_WOTS_LEN2] csum_base_w,
  reg ptr u32[SPX_WOTS_LEN] msg_base_w
) -> reg ptr u32[SPX_WOTS_LEN2] 
{
  csum_base_w = __wots_checksum(csum_base_w, msg_base_w);
  return csum_base_w;
}

export fn chain_lengths_jazz(
  reg ptr u32[SPX_WOTS_LEN] lengths,
  reg ptr u8[SPX_N] msg
) -> reg ptr u32[SPX_WOTS_LEN]
{
  lengths = __chain_lengths(lengths, msg);
  return lengths;
}

export fn wots_pk_from_sig_jazz(reg u64 _pk sig _msg _pub_seed _addr)
{
    stack u8[SPX_WOTS_BYTES] pk;
    stack u8[SPX_N] pub_seed;
    stack u8[SPX_N] msg; // root
    stack u32[8] addr;

    stack u64 s_pk s_sig s_msg s_pub_seed s_addr;

    // Spill everything (start from clean state)
    s_pk = _pk; 
    s_msg = _msg; 
    s_pub_seed = _pub_seed; 
    s_addr = _addr; 

    _pk = s_pk;
    pk = __load_u8_array<SPX_WOTS_BYTES>(pk, _pk);

    _msg = s_msg;
    msg = __load_u8_array<SPX_N>(msg, _msg);

    _pub_seed = s_pub_seed;
    pub_seed = __load_u8_array<SPX_N>(pub_seed, _pub_seed);

    _addr = s_addr;
    addr = __load_u32_array<8>(addr, _addr);

    s_pk = _pk; 
    s_addr = _addr;

    pk, addr = _wots_pk_from_sig(pk, sig, msg, pub_seed, addr);

    _pk = s_pk;     // unspill
    _addr = s_addr; // unspill

    __store_u8_array<SPX_WOTS_BYTES>(pk, _pk);
    __store_u32_array<8>(addr, _addr);
}

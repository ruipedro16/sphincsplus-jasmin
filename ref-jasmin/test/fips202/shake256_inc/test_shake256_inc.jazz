from Sphincs require "fips202/shake256_inc/shake256_inc.jinc"
from Sphincs require "generic/utils.jtmpl"

export fn shake256_inc_init_jazz(reg u64 _state)
{
  stack u64[26] state;
  reg ptr u64[26] state_p;

  state_p = state;
  state_p = __load_u64_array<26>(state_p, _state);

  state_p = __shake256_inc_init_(state_p);

  __store_u64_array<26>(state_p, _state);
}

export fn shake256_inc_absorb_jazz(reg u64 _state _in _inlen)
{
  stack u64[26] state;
  reg ptr u64[26] state_p;

  #declassify state_p = state;
  #declassify state_p = __load_u64_array<26>(state_p, _state); 

  () = #spill(_state);

  state_p = __shake256_inc_absorb_(state_p, _in, _inlen);

  () = #unspill(_state);
  __store_u64_array<26>(state_p, _state);
}

export fn shake256_inc_finalize_jazz(reg u64 _state)
{
  stack u64[26] state;
  reg ptr u64[26] state_p;

  #declassify state_p = state;
  #declassify state_p = __load_u64_array<26>(state_p, _state); 

  () = #spill(_state);

  state_p = __shake256_inc_finalize(state_p);

  () = #unspill(_state);

  __store_u64_array<26>(state_p, _state);
}

export fn shake256_inc_squeeze_jazz(
  reg u64 _out _outlen _state
)
{
  stack u64[26] state;
  reg ptr u64[26] state_p;

  stack u64 s_state;

  #declassify state_p = state;
  #declassify state_p = __load_u64_array<26>(state_p, _state); 

  s_state = _state;

  state_p = __shake256_inc_squeeze(_out, _outlen, state_p);
  _state = s_state;
  __store_u64_array<26>(state_p, _state);
}

export fn shake256_inc_absorb_template_jazz<INLEN>(
  reg u64 _state _in
)
{
  stack u64[26] state;
  stack u8[INLEN] in;
  stack u64 s_state;

  #declassify state = __load_u64_array<26>(state, _state);
  #declassify in = __load_u8_array<INLEN>(in, _in);

  () = #spill(_state);

  #declassify  state = __shake256_inc_absorb_t<INLEN>(state, in);
  
  () = #spill(_state);

  __store_u64_array<26>(state, _state);
}//<>

export fn shake256_inc_squeeze_template_jazz<OUTLEN>(
  reg u64 _out _state
)
{
  // TODO: Fix extra assignment warning
  stack u64[26] state;
  stack u8[OUTLEN] out;

  stack u64 s_state s_out;

  #declassify state = __load_u64_array<26>(state, _state); 

  s_state = _state; 
  s_out = _out;

  #declassify out, state = __shake256_inc_squeeze_t<OUTLEN>(out, state);

  _state = s_state;
  _out = s_out;
  
  __store_u64_array<26>(state, _state);
  __store_u8_array<OUTLEN>(out, _out);
}//<>

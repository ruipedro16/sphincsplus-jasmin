from Sphincs require "memcpy/memcpy.jtmpl"
from Sphincs require "generic/utils.jtmpl"

////////////////////////////////////////////////////////////////////////////////
// x_memcpy_u8u32
export fn x_memcpy_u8u32<OUTLEN,INLEN>(reg u64 _out offset _in)
{
  stack u8[OUTLEN] out;
  stack u32[INLEN] in;
  reg ptr u8[OUTLEN] out_p;
  reg ptr u32[INLEN] in_p;

  reg u8 t8;
  reg u32 t32;
  reg u64 i;

  i = 0;
  while(i < INLEN)
  { t32 = (u32)[_in + i*4];
    in[(int)i] = t32;
    i += 1;
  }

  out_p = out;
  in_p = in;
  out_p, offset = _x_memcpy_u8u32<OUTLEN,INLEN>(out_p, offset, in_p);
  out = out_p;

  i = 0;
  while(i < OUTLEN)
  { t8 = out[(int)i];
    (u8)[_out + i] = t8;
    i += 1;
  }
}//<>

////////////////////////////////////////////////////////////////////////////////
// x_memcpy_u8u8
export fn x_memcpy_u8u8<OUTLEN,INLEN>(reg u64 _out offset _in)
{
  stack u8[OUTLEN] out;
  stack u8[INLEN] in;
  reg ptr u8[OUTLEN] out_p;
  reg ptr u8[INLEN] in_p;

  reg u8 t;
  reg u64 i;

  i = 0;
  while(i < INLEN)
  { t = (u8)[_in + i];
    in[(int)i] = t;
    i += 1;
  }

  out_p = out;
  in_p = in;
  out_p, offset = _x_memcpy_u8u8<OUTLEN,INLEN>(out_p, offset, in_p);
  out = out_p;

  i = 0;
  while(i < OUTLEN)
  { t = out[(int)i];
    (u8)[_out + i] = t;
    i += 1;
  }
}//<>

////////////////////////////////////////////////////////////////////////////////
// x_memcpy_u8u8p
export fn x_memcpy_u8u8p<OUTLEN>(reg u64 _out offset _in inlen)
{
  stack u8[OUTLEN] out;
  reg ptr u8[OUTLEN] out_p;

  reg u8 t;
  reg u64 i;

  out_p = out;
  out_p, offset = _x_memcpy_u8u8p<OUTLEN>(out_p, offset, _in, inlen);
  out = out_p;

  i = 0;
  while(i < OUTLEN)
  { t = out[(int)i];
    (u8)[_out + i] = t;
    i += 1;
  }
}//<>

export fn x_memcpy_u8pu8<INLEN>(reg u64 _out offset _in)
{
  stack u8[INLEN] in;

  reg u64 i;
  reg u8 t;

  i = 0;
  while(i < INLEN)
  { t = (u8)[_in + i];
    in[(int)i] = t;
    i += 1;
  }

  _, _ = _x_memcpy_u8pu8<INLEN>(_out, offset, in);

}//<>



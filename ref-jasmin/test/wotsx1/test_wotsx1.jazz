from Sphincs require "wotsx1/wotsx1.jtmpl"
from Sphincs require "generic/utils.jtmpl"

inline fn __load_leaf_info_x1(
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] steps,
  reg ptr u32[8] leaf_addr pk_addr,
  reg u64 addr
) -> reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES], reg u32, reg ptr u32[SPX_WOTS_LEN],
     reg ptr u32[8], reg ptr u32[8]
{
  reg u64 _addr; 
  addr = addr;

  wots_sig = __load_u8_array<SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES>(wots_sig, _addr);
  _addr += SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES;

  wots_sign_leaf = (u32)[_addr];
  _addr += 4;

  steps = __load_u32_array<SPX_WOTS_LEN>(steps, _addr);
  _addr += 4*SPX_WOTS_LEN;

  leaf_addr = __load_u32_array<8>(leaf_addr, _addr);
  _addr += 4*8;

  pk_addr = __load_u32_array<8>(pk_addr, _addr);

  return wots_sig, wots_sign_leaf, steps, leaf_addr, pk_addr;
}

export fn wots_gen_leafx1_jazz(
  reg u64 _dest _pub_seed _sk_seed _leaf_idx _info
)
{
  stack u8[SPX_N] dest pub_seed sk_seed;
  reg u32 leaf_idx;

  // [struct leaf_info]
  stack u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig;
  reg u32 wots_sign_leaf;
  stack u32[SPX_WOTS_LEN] steps;
  stack u32[8] leaf_addr pk_addr;
  // [struct leaf_info]

  stack u64 s_dest s_pub_seed s_sk_seed s_leaf_idx s_info;

  dest = __load_u8_array<SPX_N>(dest, _dest);
  pub_seed = __load_u8_array<SPX_N>(pub_seed, _pub_seed);
  sk_seed = __load_u8_array<SPX_N>(sk_seed, _sk_seed);
  leaf_idx = (32u) _leaf_idx;

  wots_sig, wots_sign_leaf, steps, leaf_addr, pk_addr = __load_leaf_info_x1(wots_sig, wots_sign_leaf, steps, leaf_addr, pk_addr, _info);

  steps = __zero_array_u32<SPX_WOTS_LEN>(steps);

  s_dest = _dest;
  s_info = _info;

  dest, wots_sig, leaf_addr, pk_addr = __wots_gen_leafx1(dest, pub_seed, sk_seed, leaf_idx, wots_sig, wots_sign_leaf, steps, leaf_addr, pk_addr);

  _dest = s_dest;
  __store_u8_array<SPX_N>(dest, _dest);

  _info = s_info;
  // TODO write to info
}


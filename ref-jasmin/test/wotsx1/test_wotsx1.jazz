from Sphincs require "wotsx1/wotsx1.jtmpl"
from Sphincs require "generic/utils.jtmpl"

export fn wots_gen_leafx1_jazz(reg u64 args)
{
  // arguments[0] = (void *)dest;
  // arguments[1] = (void *)ctx->pub_seed;
  // arguments[2] = (void *)ctx->sk_seed;
  // arguments[3] = (void *)&leaf_idx;
  // arguments[4] = (void *)((struct leaf_info_x1 *)info)->wots_sig;
  // arguments[5] = (void *)((struct leaf_info_x1 *)info)->wots_sign_leaf;
  // arguments[6] = (void *)((struct leaf_info_x1 *)info)->wots_steps;
  // arguments[7] = (void *)((struct leaf_info_x1 *)info)->leaf_addr;
  // arguments[8] = (void *)((struct leaf_info_x1 *)info)->pk_addr;

  reg u64 dest_ptr pub_seed_ptr sk_seed_ptr wots_sig_ptr wots_steps_ptr leaf_addr_ptr pk_addr_ptr _ptr_;
  reg u32 leaf_idx wots_sign_leaf;

  stack   u8[SPX_N] dest;
  reg ptr u8[SPX_N] dest_p;

  stack   u8[SPX_N] pub_seed;
  reg ptr u8[SPX_N] pub_seed_p;

  stack   u8[SPX_N] sk_seed;
  reg ptr u8[SPX_N] sk_seed_p;

  stack   u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig_p;

  stack   u32[SPX_WOTS_LEN] wots_steps;
  reg ptr u32[SPX_WOTS_LEN] wots_steps_p;

  stack   u32[8] leaf_addr;
  reg ptr u32[8] leaf_addr_p;

  stack   u32[8] pk_addr;
  reg ptr u32[8] pk_addr_p;

  args = args;

  pub_seed_ptr = (u64) [args + 8*1];
  pub_seed_p   = pub_seed;
  pub_seed_p   = __load_u8_array<SPX_N>(pub_seed_p, pub_seed_ptr);

  sk_seed_ptr = (u64) [args + 8*2];
  sk_seed_p   = sk_seed;
  sk_seed_p   = __load_u8_array<SPX_N>(sk_seed_p, sk_seed_ptr);

  _ptr_    = (u64) [args + 8*3];
  leaf_idx = (u32) [_ptr_];

  wots_sig_ptr = (u64) [args + 8*4];
  wots_sig_p   = wots_sig;
  wots_sig_p   = __load_u8_array<SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES>(wots_sig_p, wots_sig_ptr);

  _ptr_          = (u64) [args + 8*5];
  wots_sign_leaf = (u32) [_ptr_];

  wots_steps_ptr = (u64) [args + 8*6];
  wots_steps_p   = wots_steps;
  wots_steps_p   = __load_u32_array<SPX_WOTS_LEN>(wots_steps_p, wots_steps_ptr);

  leaf_addr_ptr = (u64) [args + 8*7];
  leaf_addr_p   = leaf_addr;
  leaf_addr_p   = __load_u32_array<8>(leaf_addr_p, leaf_addr_ptr);

  pk_addr_ptr = (u64) [args + 8*8];
  pk_addr_p   = pk_addr;
  pk_addr_p   = __load_u32_array<8>(pk_addr_p, pk_addr_ptr);

  () = #spill(args, leaf_addr_ptr, pk_addr_ptr);

  dest_p = dest;
  dest_p, leaf_addr_p, pk_addr_p = _wots_gen_leafx1(dest_p, pub_seed_p, sk_seed_p, 
                                                                leaf_idx, wots_sig_ptr, wots_sign_leaf, 
                                                                wots_steps_p, leaf_addr_p, pk_addr_p);

  () = #unspill(args, leaf_addr_ptr, pk_addr_ptr);
  dest_ptr = (64u)[args + 8*0];

  __store_u8_array<SPX_N>(dest_p, dest_ptr);
  __store_u32_array<8>(leaf_addr_p, leaf_addr_ptr);
  __store_u32_array<8>(pk_addr_p, pk_addr_ptr);
}

export fn treehash_wots_jazz(reg u64 args)
{
  // args[0] = (void *)root;
  // args[1] = (void *)auth_path;
  // args[2] = (void *)ctx->pub_seed;
  // args[3] = (void *)ctx->sk_seed;
  // args[4] = (void *)&leaf_idx;
  // args[5] = (void *)tree_addr;
  // arguments[6] = (void *)((struct leaf_info_x1 *)info)->wots_sig;
  // arguments[7] = (void *)&((struct leaf_info_x1 *)info)->wots_sign_leaf;
  // arguments[8] = (void *)((struct leaf_info_x1 *)info)->wots_steps;
  // arguments[9] = (void *)((struct leaf_info_x1 *)info)->leaf_addr;
  // arguments[10] = (void *)((struct leaf_info_x1 *)info)->pk_addr;

  reg u64 root_ptr;
  stack u8[SPX_N] root;

  reg u64 auth_path_ptr;
  stack u8[SPX_TREE_HEIGHT * SPX_N] auth_path;

  reg u64 pub_seed_ptr;
  stack   u8[SPX_N] pub_seed;

  reg u64 sk_seed_ptr;
  stack   u8[SPX_N] sk_seed;

  reg u64 leaf_idx_ptr;
  reg u32 leaf_idx;

  reg u64 tree_addr_ptr;
  stack u32[8] tree_addr;

  reg u64 wots_sig_ptr;
  stack u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig; // struct info

  reg u64 wots_sign_leaf_ptr;
  reg u32 wots_sign_leaf; // struct info

  reg u64 wots_steps_ptr;
  stack u32[SPX_WOTS_LEN] wots_steps; // struct info

  reg u64 leaf_addr_ptr;
  stack u32[8] leaf_addr; // struct info

  reg u64 pk_addr_ptr;
  stack u32[8] pk_addr; // struct info

  root_ptr = (u64) [args + 8*0];
  root = __load_u8_array<SPX_N>(root, root_ptr);

  auth_path_ptr = (u64) [args + 8*1];
  auth_path = __load_u8_array<SPX_TREE_HEIGHT * SPX_N>(auth_path, auth_path_ptr);

  pub_seed_ptr = (u64) [args + 8*2];
  pub_seed = __load_u8_array<SPX_N>(pub_seed, pub_seed_ptr);

  sk_seed_ptr = (u64) [args + 8*3];
  sk_seed = __load_u8_array<SPX_N>(sk_seed, sk_seed_ptr);

  leaf_idx_ptr = (u64) [args + 8*4];
  leaf_idx = (u32) [leaf_idx_ptr];

  tree_addr_ptr = (u64) [args + 8*5];
  tree_addr = __load_u32_array<8>(tree_addr, tree_addr_ptr);

  wots_sig_ptr = (u64) [args + 8*6];
  // wots_sig = __load_u8_array<SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES>(wots_sig, wots_sig_ptr);

  wots_sign_leaf_ptr = (u64) [args + 8*7];
  wots_sign_leaf = (u32) [wots_sign_leaf_ptr];

  wots_steps_ptr = (u64) [args + 8*8];
  wots_steps = __load_u32_array<SPX_WOTS_LEN>(wots_steps, wots_steps_ptr);

  leaf_addr_ptr = (u64) [args + 8*9];
  leaf_addr   = __load_u32_array<8>(leaf_addr, leaf_addr_ptr);

  pk_addr_ptr = (u64) [args + 8*10];
  pk_addr   = __load_u32_array<8>(pk_addr, pk_addr_ptr);

  // Below this point, args is no longer live

  () = #spill(root_ptr, auth_path_ptr, tree_addr_ptr, leaf_addr_ptr, pk_addr_ptr);

  root, auth_path, tree_addr, leaf_addr, pk_addr = 
      __treehash_wots(root, auth_path, pub_seed, sk_seed, 
                      leaf_idx, tree_addr, wots_sig_ptr, wots_sign_leaf, 
                      wots_steps, leaf_addr, pk_addr);

  () = #unspill(root_ptr, auth_path_ptr, tree_addr_ptr, leaf_addr_ptr, pk_addr_ptr);

  __store_u8_array<SPX_N>(root, root_ptr);
  __store_u8_array<SPX_TREE_HEIGHT * SPX_N>(auth_path, auth_path_ptr);
  __store_u32_array<8>(tree_addr, tree_addr_ptr);
  __store_u32_array<8>(leaf_addr, leaf_addr_ptr);
  __store_u32_array<8>(pk_addr, pk_addr_ptr);
}
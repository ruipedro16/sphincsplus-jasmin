from Sphincs require "fors/fors.jtmpl"
from Sphincs require "generic/utils.jtmpl"

/*
export fn fors_gen_sk_jazz(
  reg u64 _sk _pub_seed _sk_seed _fors_leaf_addr
)
{
  stack u8[SPX_N] sk;
  stack u8[SPX_N] pub_seed;
  stack u8[SPX_N] sk_seed;
  stack u32[8] fors_leaf_addr;

  reg ptr u8[SPX_N] sk_p;
  reg ptr u8[SPX_N] pub_seed_p;
  reg ptr u8[SPX_N] sk_seed_p;
  reg ptr u32[8] fors_leaf_addr_p;

  stack u64 s_sk s_pub_seed s_sk_seed s_fors_leaf_addr;

  sk_p = sk;
  sk_p = __load_u8_array<SPX_N>(sk_p, _sk);

  pub_seed_p = pub_seed;
  pub_seed_p = __load_u8_array<SPX_N>(pub_seed_p, _pub_seed);

  sk_seed_p = sk_seed;
  sk_seed_p = __load_u8_array<SPX_N>(sk_seed_p, _sk_seed);

  fors_leaf_addr_p = fors_leaf_addr;
  fors_leaf_addr_p = __load_u32_array<8>(fors_leaf_addr_p, _fors_leaf_addr);

  // Spill
  s_sk = _sk;
  s_pub_seed = _pub_seed;
  s_sk_seed = _sk_seed;
  s_fors_leaf_addr = _fors_leaf_addr;

  sk_p = __fors_gen_sk(sk_p, pub_seed_p, sk_seed_p, fors_leaf_addr_p);

  _sk = s_sk;

  __store_u8_array<SPX_N>(sk_p, _sk);

}

export fn fors_sk_to_leaf_jazz(
  reg u64 _leaf _sk _pub_seed _fors_leaf_addr
)
{
  stack u8[SPX_N] leaf;
  stack u8[SPX_N] sk;
  stack u8[SPX_N] pub_seed;
  stack u32[8] fors_leaf_addr;

  reg ptr u8[SPX_N] leaf_p;
  reg ptr u8[SPX_N] sk_p;
  reg ptr u8[SPX_N] pub_seed_p;
  reg ptr u32[8] fors_leaf_addr_p;

  stack u64 s_leaf s_sk s_pub_seed s_fors_leaf_addr;


  sk_p = sk;
  sk_p = __load_u8_array<SPX_N>(sk_p, _sk);

  pub_seed_p = pub_seed;
  pub_seed_p = __load_u8_array<SPX_N>(pub_seed_p, _pub_seed);

  fors_leaf_addr_p = fors_leaf_addr;
  fors_leaf_addr_p = __load_u32_array<8>(fors_leaf_addr_p, _fors_leaf_addr);

  // Spill
  s_leaf = _leaf;

  leaf_p = leaf;
  leaf_p = __fors_sk_to_leaf__(leaf_p, sk_p, pub_seed_p, fors_leaf_addr_p);

  _leaf = s_leaf;
  __store_u8_array<SPX_N>(leaf_p, _leaf);
}

export fn fors_gen_leafx1_jazz(
  reg u64 _leaf _pub_seed _sk_seed _addr_idx _fors_leaf_addr
)
{
  stack u8[SPX_N] leaf;
  stack u8[SPX_N] pub_seed;
  stack u8[SPX_N] sk_seed;
  stack u32[8] fors_leaf_addr;

  reg u32 addr_idx;

  reg ptr u8[SPX_N] leaf_p;
  reg ptr u8[SPX_N] pub_seed_p;
  reg ptr u8[SPX_N] sk_seed_p;
  reg ptr u32[8] fors_leaf_addr_p;

  stack u64 s_leaf s_pub_seed s_sk_seed s_addr_idx s_fors_leaf_addr;

  leaf_p = leaf;
  leaf_p = __load_u8_array<SPX_N>(leaf_p, _leaf);

  pub_seed_p = pub_seed;
  pub_seed_p = __load_u8_array<SPX_N>(pub_seed_p, _pub_seed);

  sk_seed_p = sk_seed;
  sk_seed_p = __load_u8_array<SPX_N>(sk_seed_p, _sk_seed);

  addr_idx = (32u) _addr_idx;

  fors_leaf_addr_p = fors_leaf_addr;
  fors_leaf_addr_p = __load_u32_array<8>(fors_leaf_addr_p, _fors_leaf_addr);

  // Spill
  s_leaf = _leaf;

  leaf_p, _ = __fors_gen_leafx1__(leaf_p, pub_seed_p, sk_seed_p, addr_idx, fors_leaf_addr_p);

  _leaf = s_leaf; // unspill
  __store_u8_array<SPX_N>(leaf_p, _leaf);
}

export fn message_to_indices_jazz(
  reg u64 _indices m
)
{
  stack u32[SPX_FORS_TREES] indices;
  reg ptr u32[SPX_FORS_TREES] indices_p;

  stack u64 s_indices;
  indices_p = indices;

  indices_p = __message_to_indices(indices_p, m);
  __store_u32_array<SPX_FORS_TREES>(indices_p, _indices);
}

export fn message_to_indices_t_jazz<MSG_LEN>(
  reg u64 _indices _msg
)
{
  stack u32[SPX_FORS_TREES] indices;
  reg ptr u32[SPX_FORS_TREES] indices_p;

  stack u8[MSG_LEN] msg;
  reg ptr u8[MSG_LEN] msg_p;

  stack u64 s_indices;

  indices_p = indices;
  msg_p = msg;

  msg_p = __load_u8_array<MSG_LEN>(msg_p, _msg);
  
  indices_p = __message_to_indices_t<MSG_LEN>(indices_p, msg_p);
  __store_u32_array<SPX_FORS_TREES>(indices_p, _indices);
}//<>

export fn fors_sign_jazz(reg u64 sig _pk _msg _pub_seed _sk_seed _fors_addr)
{
   stack u8[SPX_FORS_PK_BYTES] pk;
  stack u8[SPX_FORS_MSG_BYTES] msg;
  stack u8[SPX_N] pub_seed;
  stack u8[SPX_N] sk_seed;
  stack u32[8] fors_addr;

  stack u64 s_pk;

  pk = __load_u8_array<SPX_FORS_PK_BYTES>(pk, _pk);
  msg = __load_u8_array<SPX_FORS_MSG_BYTES>(msg, _msg);
  pub_seed = __load_u8_array<SPX_N>(pub_seed, _pub_seed);
  sk_seed = __load_u8_array<SPX_N>(sk_seed, _sk_seed);
  fors_addr = __load_u32_array<8>(fors_addr, _fors_addr);
  
  s_pk = _pk;

  pk = __fors_sign(sig, pk, msg, pub_seed, sk_seed, fors_addr); // we write to sig here

  _pk = s_pk;
  __store_u8_array<SPX_FORS_PK_BYTES>(pk, _pk);
}//<>

export fn fors_pk_from_sig_jazz(
  reg u64 _pk sig _msg _pub_seed _sk_seed _fors_addr
)
{
  stack u8[SPX_N] pk; // root
  stack u8[SPX_FORS_MSG_BYTES] msg;
  stack u8[SPX_N] pub_seed;
  stack u8[SPX_N] sk_seed;
  stack u32[8] fors_addr;

  stack u64 s_pk;

  pk = __load_u8_array<SPX_N>(pk, _pk);
  msg = __load_u8_array<SPX_FORS_MSG_BYTES>(msg, _msg);
  pub_seed = __load_u8_array<SPX_N>(pub_seed, _pub_seed);
  sk_seed = __load_u8_array<SPX_N>(sk_seed, _sk_seed);
  fors_addr = __load_u32_array<8>(fors_addr, _fors_addr);

  s_pk = _pk;

  pk = __fors_pk_from_sig_(pk, sig, msg, pub_seed, sk_seed, fors_addr);
  
  _pk = s_pk;
  __store_u8_array<SPX_N>(pk, _pk);
}

*/

//////////////////////////////////// Treehash
inline fn __load_ctx(
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u64 addr
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  pub_seed = __load_u8_array<SPX_N>(pub_seed, addr);
  addr += SPX_N;
  sk_seed = __load_u8_array<SPX_N>(sk_seed, addr);
  return pub_seed, sk_seed;
}

inline fn __load_info(
  reg ptr u32[8] tree_addr info, 
  reg u64 addr
) -> reg ptr u32[8], reg ptr u32[8]
{
  reg u64 addr1 addr2;

  addr1 = [addr];
  tree_addr = __load_u32_array<8>(tree_addr, addr1);

  addr2 = [addr + 8];
  info = __load_u32_array<8>(info, addr2);

  return tree_addr, info;
}

inline fn __store_info(
  reg ptr u32[8] tree_addr info, 
  reg u64 addr
)
{
  reg u64 addr1 addr2;

  addr1 = [addr];
  __store_u32_array<8>(tree_addr, addr1);

  addr2 = [addr+8];
  __store_u32_array<8>(info, addr2);
}

export fn treehash_fors_jazz(
  reg u64 _root auth_path _ctx _leaf_idx _idx_offset _addrs
)
{
  stack u8[SPX_N] root;
  stack u8[SPX_N] pub_seed;
  stack u8[SPX_N] sk_seed;
  stack u32[8] tree_addr, info;

  reg u32 leaf_idx idx_offset;

  stack u64 s_addrs s_root;

  s_root = _root;
  s_addrs = _addrs;

  root = __load_u8_array<SPX_N>(root, _root);  
  pub_seed, sk_seed = __load_ctx(pub_seed, sk_seed, _ctx);
  leaf_idx = (32u) _leaf_idx;
  idx_offset = (32u) _idx_offset;

  tree_addr, info = __load_info(tree_addr, info, _addrs);


  root, tree_addr, info = __treehash_fors_(root, auth_path, pub_seed, sk_seed, leaf_idx, idx_offset, tree_addr, info);

  _root = s_root;
  __store_u8_array<SPX_N>(root, _root);

  _addrs = s_addrs;
  __store_info(tree_addr, info, _addrs);
}

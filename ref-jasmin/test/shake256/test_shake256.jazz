from Sphincs require "fips202/shake256.jtmpl"
from Sphincs require "fips202/shake256_inc.jtmpl"
from Sphincs require "generic/utils.jtmpl"

export fn shake256<OUTLEN,INLEN>(reg u64 _out _in)
{
  stack u8[OUTLEN] out;
  stack u8[INLEN] in;
  reg ptr u8[OUTLEN] out_p;
  reg ptr u8[INLEN] in_p;

  reg u8 t;
  reg u64 i;

  i = 0;
  while(i < INLEN)
  { t = (u8)[_in + i];
    in[(int)i] = t;
    i += 1;
  }

  out_p = out;
  in_p = in;

  out_p = __shake256<OUTLEN,INLEN>(out_p, in_p);

  out = out_p;

  i = 0;
  while(i < OUTLEN)
  { t = out[(int)i];
    (u8)[_out + i] = t;
    i += 1;
  }
}//<>

export fn shake256_inc_init_jazz(reg u64 _state) 
{
  stack u64[26] state;
  reg ptr u64[26] state_p;

  state_p = state;
  state_p = __shake256_inc_init(state_p);
  
  __store_u64_array<26>(state_p, _state);
}

export fn shake256_inc_absorb_jazz<INLEN>(reg u64 _state _in)
{
  stack u64[26] state;
  reg ptr u64[26] state_p;

  stack u8[INLEN] in;
  reg ptr u8[INLEN] in_p;

  stack u64 s_state s_in;

  state_p = state;
  state_p = __load_u64_array<26>(state_p, _state);

  in_p = in;
  in_p = __load_u8_array<INLEN>(in_p, _in);

  // spill registers
  s_state = _state;
  s_in = _in;

  state_p = __shake256_inc_absorb<INLEN>(state_p, in_p);

  _state = s_state; // unspill
  __store_u64_array<26>(state_p, _state);
}//<>

export fn shake256_inc_finalize_jazz(reg u64 _state)
{
  stack u64[26] state;
  reg ptr u64[26] state_p;
  stack u64 s_state;

  state_p = state;
  state_p = __load_u64_array<26>(state_p, _state);

  s_state = _state; // spill

  state_p = state;
  state_p = __shake256_inc_finalize(state_p);

  _state = s_state; // unspill
  __store_u64_array<26>(state_p, _state);
}

export fn shake256_inc_squeeze_jazz<OUTLEN>(reg u64 _out _state)
{
  stack u64[26] state;
  reg ptr u64[26] state_p;

  stack u8[OUTLEN] out;
  reg ptr u8[OUTLEN] out_p;

  stack u64 s_out s_state;
  
  state_p = state;
  state_p = __load_u64_array<26>(state_p, _state);

  s_out = _out; s_state = _state; // spill

  out_p = out;
  out_p, _ = __shake256_inc_squeeze<OUTLEN>(out_p, state_p);

  _out = s_out; // unspill
  __store_u8_array<OUTLEN>(out_p, _out);
}//<>

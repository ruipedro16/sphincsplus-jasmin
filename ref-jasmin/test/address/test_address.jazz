
from Sphincs require "address/address.jinc"

// 
// Specify which level of Merkle tree (the "layer") we're working on
// 
export fn set_layer_addr_jazz(
  reg ptr u32[8] addr,
  reg u32 layer
) -> reg ptr u32[8]
{
  addr = __set_layer_addr(addr, layer);
  return addr;
}


// 
// Specify which Merkle tree within the level (the "tree address") we're working on
//
export fn set_tree_addr_jazz(
  reg ptr u32[8] addr,
  reg u64 tree
) -> reg ptr u32[8]
{
  addr = __set_tree_addr(addr, tree);
  return addr;
}


// 
// Specify the reason we'll use this address structure for, that is, what
// hash will we compute with it.  This is used so that unrelated types of
// hashes don't accidentally get the same address structure.  The type will be
// one of the SPX_ADDR_TYPE constants
//
export fn set_type_jazz(
  reg ptr u32[8] addr,
  reg u32 type
) -> reg ptr u32[8]
{
  addr = __set_type(addr, type);
  return addr;
}


// 
// Copy the layer and tree fields of the address structure.  This is used
// when we're doing multiple types of hashes within the same Merkle tree
// 
export fn copy_subtree_addr_jazz(
  reg ptr u32[8] out_addr,
  reg ptr u32[8] in_addr
) -> reg ptr u32[8]
{
  out_addr = __copy_subtree_addr(out_addr, in_addr);
  return out_addr;
}


// 
// Specify which Merkle leaf we're working on; that is, which OTS keypair
// we're talking about.
//
export fn set_keypair_addr_jazz(
  reg ptr u32[8] addr,
  reg u32 keypair
) -> reg ptr u32[8]
{
  addr = __set_keypair_addr(addr, keypair);
  return addr;
}


// 
// Copy the layer, tree and keypair fields of the address structure.  This is
// used when we're doing multiple things within the same OTS keypair
// 
export fn copy_keypair_addr_jazz(
  reg ptr u32[8] out_addr,
  reg ptr u32[8] in_addr
) -> reg ptr u32[8]
{
  out_addr = __copy_keypair_addr(out_addr, in_addr);
  return out_addr;
}


// 
// Specify which Merkle chain within the OTS we're working with
// (the chain address)
//
export fn set_chain_addr_jazz(
  reg ptr u32[8] addr,
  reg u32 chain
) -> reg ptr u32[8]
{
  addr = __set_chain_addr(addr, chain);
  return addr;
}


//
// Specify where in the Merkle chain we are
// (the hash address)
//
export fn set_hash_addr_jazz(
  reg ptr u32[8] addr,
  reg u32 hash
) -> reg ptr u32[8]
{
  addr = __set_hash_addr(addr, hash);
  return addr;
}


// These functions are used for all hash tree addresses (including FORS).


// 
// Specify the height of the node in the Merkle/FORS tree we are in
// (the tree height)
// 
export fn set_tree_height_jazz(
  reg ptr u32[8] addr,
  reg u32 tree_height
) -> reg ptr u32[8]
{
  addr = __set_tree_height(addr, tree_height);
  return addr;
}


// 
// Specify the distance from the left edge of the node in the Merkle/FORS tree
// (the tree index)
// 
export fn set_tree_index_jazz(
  reg ptr u32[8] addr,
  reg u32 tree_index
) -> reg ptr u32[8]
{
  addr = __set_tree_index(addr, tree_index);
  return addr;
}

from Sphincs require "fips202/shake256.jtmpl"
from Sphincs require "memcpy/memcpy.jtmpl"

inline fn __thash<INBLOCKS>(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS*SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr)
  ->
  reg ptr u8[SPX_N]
{
  stack   u8[SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N] buf;
  reg ptr u8[SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N] buf_p;
  reg ptr u8[SPX_N + SPX_ADDR_BYTES]                  buf_ps;

  stack   u8[INBLOCKS*SPX_N] bitmask;
  reg ptr u8[INBLOCKS*SPX_N] bitmask_p;

  stack ptr u8[SPX_N] out_s;
  stack ptr u8[INBLOCKS*SPX_N] in_s;

  reg u64 i offset;
  stack u64 offset_s;
  reg u8 b;

  out_s = out;
  in_s = in;
  buf_p = buf;
  offset = 0;

  buf_p, offset = _x_memcpy_u8u8<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_N>(buf_p, offset, pub_seed);
  buf_p, offset = _x_memcpy_u8u32<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, 8>(buf_p, offset, addr);

  buf = buf_p;
  offset_s = offset;

  bitmask_p = bitmask;
  buf_ps = buf[0:(SPX_N + SPX_ADDR_BYTES)];
  bitmask_p = __shake256<INBLOCKS*SPX_N,SPX_N + SPX_ADDR_BYTES>(bitmask_p, buf_ps);

  // TODO: optimize
  in = in_s;
  i = 0;
  offset = offset_s;
  while(i < INBLOCKS*SPX_N)
  { b  = in[(int) i];
    b ^= bitmask_p[(int) i];
    buf[(int) offset] = b;
    offset += 1;
    i += 1;
  }

  out = out_s;
  buf_p = buf;
  out = __shake256<SPX_N, SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N>(out, buf_p);

  return out;
}//<>

#[returnaddress="stack"]
fn _thash<INBLOCKS>(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS*SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = __thash<INBLOCKS>(out, in, pub_seed, addr);
  return out;
}//<>

inline fn __thash_<INBLOCKS>(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS*SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = out; in = in; pub_seed = pub_seed; addr = addr;
  out = _thash<INBLOCKS>(out, in, pub_seed, addr);
  out = out; in = in; pub_seed = pub_seed; addr = addr;

  return out;
}//<>

// TODO define inplace for ROBUST

inline fn __set_layer_addr(reg ptr u32[8] addr, reg u32 layer) -> reg ptr u32[8] {
    addr[u8 SPX_OFFSET_LAYER] = (8u) layer;
    return addr;
}

inline fn __set_tree_addr(reg ptr u32[8] addr, reg u64 tree) -> reg ptr u32[8] {
    inline int i;

    tree = tree;
    tree = #BSWAP_64(tree); // little-endian

    for i=0 to 8 {  
        addr[u8 SPX_OFFSET_TREE + i] = (8u) tree;
        if (i != 7) { tree >>= 8; } // statically resolved if
    }

    return addr;
}


inline fn __set_type(reg ptr u32[8] addr, reg u32 type) -> reg ptr u32[8] {
    addr[u8 SPX_OFFSET_TYPE] = (8u) type;
    return addr;
}

inline fn __copy_subtree_addr(reg ptr u32[8] out, reg ptr u32[8] in) -> reg ptr u32[8] {
    inline int i;

    for i=0 to SPX_OFFSET_TREE+8 { out[u8 i] = in[u8 i]; }

    return out;
}

inline fn __set_keypair_addr(reg ptr u32[8] addr, reg u32 keypair) -> reg ptr u32[8] {
    reg u32 t;

    if ((SPX_FULL_HEIGHT / SPX_D) > 8) { 
        t = keypair;
        t >>= 8; 
        addr[u8 SPX_OFFSET_KP_ADDR2] = (8u) t;
    }

    addr[u8 SPX_OFFSET_KP_ADDR1] = (8u) keypair;

    return addr;
}

inline fn __copy_keypair_addr(reg ptr u32[8] out, reg ptr u32[8] in) -> reg ptr u32[8] {
    reg u8 t;

    out = __copy_subtree_addr(out, in); // same as memcpy( out, in, SPX_OFFSET_TREE+8 )

    if ((SPX_FULL_HEIGHT / SPX_D) > 8) { // statically resolved if
        t = in[u8 SPX_OFFSET_KP_ADDR2];
        out[u8 SPX_OFFSET_KP_ADDR2] = t;
    }

    t = in[u8 SPX_OFFSET_KP_ADDR1];
    out[u8 SPX_OFFSET_KP_ADDR1] = t;

    return out;
}

inline fn __set_chain_addr(reg ptr u32[8] addr, reg u32 chain) -> reg ptr u32[8] {
    addr[u8 SPX_OFFSET_CHAIN_ADDR] = (8u) chain;

    return addr;
}

inline fn __set_hash_addr(reg ptr u32[8] addr, reg u32 hash) -> reg ptr u32[8] {
    addr[u8 SPX_OFFSET_HASH_ADDR] = (8u) hash;

    return addr;
}

inline fn __set_tree_height(reg ptr u32[8] addr, reg u32 tree_height) -> reg ptr u32[8] {
    addr[u8 SPX_OFFSET_TREE_HGT] = (8u) tree_height;

    return addr;
}

inline fn __set_tree_index(reg ptr u32[8] addr, reg u32 tree_index) -> reg ptr u32[8] {
    inline int i;

    tree_index = #BSWAP_32(tree_index); // little-endian

    for i=0 to 4 {  
        addr[u8 SPX_OFFSET_TREE_INDEX + i] = (8u) tree_index;
        if(i != 4){ tree_index >>= 8; } // statically resolved if
    }

    return addr;
}

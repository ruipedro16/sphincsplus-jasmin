from Sphincs require "address/address.jinc"
from Sphincs require "hash/hash_shake.jtmpl"

// NOTE: The thash import is managed in the makefile

/*
 * This generates a WOTS public key
 * It also generates the WOTS signature if leaf_info indicates
 * that we're signing with this WOTS key
 */
inline fn __wots_gen_leafx1(
  reg ptr u8[SPX_PK_BYTES] pk, // TODO: MAKE SPX_N
  reg ptr u8[SPX_N] pub_seed sk_seed,
  reg u32 leaf_idx,
  reg mut ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] steps,
  reg mut ptr u32[8] leaf_addr pk_addr
) -> reg ptr u8[SPX_PK_BYTES]
{

  reg u32 wots_k wots_k_mask;
  
  inline int i pk_offset;

  stack u8[SPX_WOTS_BYTES] pk_buffer;

  reg u32 t;

  reg u32 k stop;

  stack u32 s_wots_k s_wots_k_mask s_t s_leaf_idx s_wots_sign_leaf s_k s_stop;
  stack ptr u8[SPX_PK_BYTES] s_pk;
  stack ptr u8[SPX_N] s_pub_seed s_sk_seed;
  stack ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] s_wots_sig;
  stack ptr u32[SPX_WOTS_LEN] s_steps;
  stack ptr u32[8] s_leaf_addr s_pk_addr;

  reg ptr u8[SPX_N] buf;

  if (leaf_idx == wots_sign_leaf) {
    wots_sign_leaf = 0;
  } else {
    t = 0; t = #NOT_32(t);
    wots_sign_leaf = t;
  }

  leaf_addr = __set_keypair_addr(leaf_addr, leaf_idx);
  pk_addr = __set_keypair_addr(pk_addr, leaf_idx);

  pk_offset = 0;
  for i = 0 to SPX_WOTS_LEN
  {
    wots_k = steps[i];
    wots_k |= wots_k_mask;

    /* Start with the secret seed */
    leaf_addr = __set_chain_addr(leaf_addr, i);
    leaf_addr = __set_hash_addr(leaf_addr, 0);
    leaf_addr = __set_type(leaf_addr, SPX_ADDR_TYPE_WOTSPRF);
  
    // Spill
    s_pk = pk;
    s_pub_seed = pub_seed;
    s_sk_seed = sk_seed;
    s_leaf_idx = leaf_idx;
    s_wots_sig = wots_sig;
    s_wots_sign_leaf = wots_sign_leaf;
    s_steps = steps;
    s_leaf_addr = leaf_addr;
    s_pk_addr = pk_addr;
    s_wots_k_mask = wots_k_mask;
    s_wots_k = wots_k;
    s_t = t;
    s_k = k;
    s_stop = stop;


    pk_buffer[i*SPX_N : SPX_N] = __prf_addr(pk_buffer[i*SPX_N : SPX_N], pub_seed, sk_seed, leaf_addr);

    // Unspill
    pk = s_pk;
    pub_seed = s_pub_seed;
    sk_seed = s_sk_seed;
    leaf_idx = s_leaf_idx;
    wots_sig = s_wots_sig;
    wots_sign_leaf = s_wots_sign_leaf;
    steps = s_steps;
    leaf_addr = s_leaf_addr;
    pk_addr = s_pk_addr;
    wots_k_mask = s_wots_k_mask;
    wots_k = s_wots_k;
    t = s_t;
    k = s_k;
    stop = s_stop;

    leaf_addr = __set_type(leaf_addr, SPX_ADDR_TYPE_WOTS);

    k = 0; stop = 0; // TODO: Break / goto em jasmin?

    while (stop != 1) {
      /* Check if this is the value that needs to be saved as a */
      /* part of the WOTS signature */
      if (k == wots_k) {
        wots_sig[i*SPX_N : SPX_N], _ = _x_memcpy_u8u8<SPX_N, SPX_N>(wots_sig[i*SPX_N : SPX_N], 0, pk_buffer[i*SPX_N : SPX_N]);
      }
      
      /* Check if we hit the top of the chain */
      if (k == SPX_WOTS_W - 1) { stop = 1; }

      /* Iterate one step on the chain */
      if (stop != 1) {
        leaf_addr = __set_hash_addr(leaf_addr, k);

        // Spill
        s_sk_seed = sk_seed;
        s_leaf_idx = leaf_idx;
        s_wots_sig = wots_sig;
        s_wots_sign_leaf = wots_sign_leaf;
        s_steps = steps;
        s_leaf_addr = leaf_addr;
        s_wots_k = wots_k;
        s_wots_k_mask = wots_k_mask;
        s_t = t;
        s_k = k;
        s_stop = stop;

        // FIXME: reg alloc
        // pk[0:SPX_N] = __thash_<SPX_WOTS_LEN>(pk[0:SPX_N], pk_buffer, pub_seed, pk_addr);

        // Unspill
        sk_seed = s_sk_seed;
        leaf_idx = s_leaf_idx;
        wots_sig = s_wots_sig;
        wots_sign_leaf = s_wots_sign_leaf;
        steps = s_steps;
        leaf_addr = s_leaf_addr;
        wots_k = s_wots_k;
        wots_k_mask = s_wots_k_mask;
        t = s_t;
        k = s_k;
        stop = s_stop;
      }

      k+=1;
    }
  }

  // Spill
  s_sk_seed = sk_seed;
  s_leaf_idx = leaf_idx;
  s_wots_sig = wots_sig;
  s_wots_sign_leaf = wots_sign_leaf;
  s_steps = steps;
  s_leaf_addr = leaf_addr;
  s_wots_k = wots_k;
  s_wots_k_mask = wots_k_mask;
  s_t = t;
  s_k = k;
  s_stop = stop;

  // FIXME:
  // pk[0:SPX_N] = __thash_<SPX_WOTS_LEN>(pk[0:SPX_N], pk_buffer, pub_seed, pk_addr);

  // Unspill
  sk_seed = s_sk_seed;
  leaf_idx = s_leaf_idx;
  wots_sig = s_wots_sig;
  wots_sign_leaf = s_wots_sign_leaf;
  steps = s_steps;
  leaf_addr = s_leaf_addr;
  wots_k = s_wots_k;
  wots_k_mask = s_wots_k_mask;
  t = s_t;
  k = s_k;
  stop = s_stop;

  return pk;
}

from Sphincs require "address/address.jinc"
from Sphincs require "hash/hash_shake.jtmpl"

inline fn __wots_gen_leafx1(
  reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N], // dest
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES], // wots_sig
  reg ptr u32[8], // leaf_addr
  reg ptr u32[8] // pk_addr
{
  stack ptr u8[SPX_N] s_dest s_pub_seed s_sk_seed;
  stack u32 s_leaf_idx;
  stack ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] s_wots_sig;
  stack u32 s_wots_sign_leaf;
  stack ptr u32[SPX_WOTS_LEN] s_wots_steps;
  stack ptr u32[8] s_leaf_addr s_pk_addr;

  //
  reg u32 wots_k_mask;
  stack u32 s_wots_k_mask;
  inline int i;
  stack u8[SPX_WOTS_BYTES] pk_buffer;
  reg ptr u8[SPX_N] buffer;
  reg u32 wots_k;
  stack u32 s_wots_k;
  reg u32 chain hash type;
  reg u32 k stop;
  reg u64 offset;
  reg ptr u8[SPX_N] wots_sig_spx_n;
  stack u32 s_k;

  // move 'everything' into the stack
  s_dest = dest;
  s_pub_seed = pub_seed;
  s_sk_seed = sk_seed;
  s_wots_sig = wots_sig;
  s_wots_sign_leaf = wots_sign_leaf;
  s_wots_steps = wots_steps;

  return dest, wots_sig, leaf_addr, pk_addr;
}

#[returnaddress="stack"]
fn _wots_gen_leafx1(
  reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N],
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
  reg ptr u32[8], 
  reg ptr u32[8]
{
  dest, wots_sig, leaf_addr, pk_addr = __wots_gen_leafx1(dest, pub_seed, sk_seed, leaf_idx,
                                                         wots_sig, wots_sign_leaf, wots_steps,
                                                         leaf_addr, pk_addr);
  return dest, wots_sig, leaf_addr, pk_addr;                     
}

inline fn __wots_gen_leafx1_(
reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N],
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
  reg ptr u32[8], 
  reg ptr u32[8]
{
  dest = dest;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  leaf_idx = leaf_idx;
  wots_sig = wots_sig;
  wots_sign_leaf = wots_sign_leaf;
  wots_steps = wots_steps;
  leaf_addr = leaf_addr;
  pk_addr = pk_addr;

  dest, wots_sig, leaf_addr, pk_addr = _wots_gen_leafx1(dest, pub_seed, sk_seed, leaf_idx,
                                                        wots_sig, wots_sign_leaf, wots_steps,
                                                        leaf_addr, pk_addr);

  dest = dest;
  wots_sig = wots_sig;
  leaf_addr = leaf_addr;
  pk_addr = pk_addr;
 
  return dest, wots_sig, leaf_addr, pk_addr;
}

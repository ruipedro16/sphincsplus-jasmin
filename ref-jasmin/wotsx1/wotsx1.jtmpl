from Sphincs require "address/address.jinc"
from Sphincs require "hash/hash_shake.jtmpl"

inline fn __wots_gen_leafx1(
  reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N], // dest
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES], // wots_sig
  reg ptr u32[8], // leaf_addr
  reg ptr u32[8] // pk_addr
{
  reg u32 wots_k;      // Spilling this with () # spill doenst work ???
  stack u32 s_wots_k;  // Spilling this with () # spill doenst work ???
  stack u32 s_wots_k_mask;
  
  reg u32 chain hash type;

  inline int i;

  stack   u8[SPX_WOTS_BYTES] pk_buffer;
  reg ptr u8[SPX_WOTS_BYTES] pk_buffer_p;
  reg ptr u8[SPX_N] buffer;

  stack u32 s_k;
  stack u8 stop;

  reg u64 offset;
  reg ptr u8[SPX_N] wots_sig_spx_n;

  // Initial spills
  () = #spill(dest, wots_sig, wots_steps, pub_seed, sk_seed);

  // if (leaf_idx == info->wots_sign_leaf) { wots_k_mask = 0; } else { wots_k_mask = (uint32_t)~0; }
  if (leaf_idx == wots_sign_leaf) { s_wots_k_mask = 0; } else { s_wots_k_mask = 0xFFFFFFFF; }

  // set_keypair_addr(leaf_addr, leaf_idx);
  leaf_addr = __set_keypair_addr(leaf_addr, leaf_idx);

  // set_keypair_addr(pk_addr, leaf_idx);
  pk_addr = __set_keypair_addr(pk_addr, leaf_idx);

  () = #spill(leaf_addr, pk_addr);

  // for (i = 0, buffer = pk_buffer; i < SPX_WOTS_LEN; i++, buffer += SPX_N)
  for i=0 to SPX_WOTS_LEN
  {
    // INVARIANTES:
    // wots_steps nao esta live
    // leaf_addr, pk_addr nao estao live

    // uint32_t wots_k = info->wots_steps[i] | wots_k_mask; 
    () = #unspill(wots_steps);
    wots_k = wots_steps[i];
    wots_k |= s_wots_k_mask;
    s_wots_k = wots_k;

    // set_chain_addr(leaf_addr, i);
    () = #unspill(leaf_addr);
    chain = i;
    leaf_addr = __set_chain_addr(leaf_addr, chain);

    // set_hash_addr(leaf_addr, 0);
    hash = 0;
    leaf_addr = __set_hash_addr(leaf_addr, hash);

    // set_type(leaf_addr, SPX_ADDR_TYPE_WOTSPRF);
    type = SPX_ADDR_TYPE_WOTSPRF;
    leaf_addr = __set_type(leaf_addr, type);
    () = #spill(leaf_addr);

    // prf_addr(buffer, ctx, leaf_addr);
    () = #unspill(pub_seed, sk_seed);
    buffer = pk_buffer[i*SPX_N : SPX_N];
    buffer = __prf_addr(buffer, pub_seed, sk_seed, leaf_addr);
    pk_buffer[i*SPX_N : SPX_N] = buffer;

    // set_type(leaf_addr, SPX_ADDR_TYPE_WOTS);
    () = #unspill(leaf_addr);
    type = SPX_ADDR_TYPE_WOTS;
    leaf_addr = __set_type(leaf_addr, type);
    () = #spill(leaf_addr);

    // for (k=0;; k++)
    s_k = 0;
    stop = 0; // we introduce stop to handle the corresponding 'break' statement
    while (stop != 1)
    {
      // if (k == wots_k) { memcpy( info->wots_sig + i * SPX_N, buffer, SPX_N ); }
      wots_k = s_wots_k;
      if (s_k == wots_k)
      {
        () = #unspill(wots_sig);
        wots_sig_spx_n = wots_sig[i*SPX_N : SPX_N];
        offset = 0;
        buffer = pk_buffer[i*SPX_N : SPX_N];
        wots_sig[i*SPX_N : SPX_N], _ = _x_memcpy_u8u8<SPX_N, SPX_N>(wots_sig_spx_n, offset, buffer);
        () = #spill(wots_sig);
      }

      // if (k == SPX_WOTS_W - 1) { break; }
      if (s_k == SPX_WOTS_W - 1) { stop = 1; }

      if (stop != 1)  // i.e. if we havent broken out of the loop yet
      {
        // set_hash_addr(leaf_addr, k);
        () = #unspill(leaf_addr);
        hash = s_k;
        leaf_addr = __set_hash_addr(leaf_addr, hash);
        () = #spill(leaf_addr);

        // thash(buffer, buffer, 1, ctx, leaf_addr);
        () = #unspill(pub_seed);
        buffer = pk_buffer[i*SPX_N : SPX_N];
        buffer = __thash_inplace_(buffer, pub_seed, leaf_addr);
        pk_buffer[i*SPX_N : SPX_N] = buffer;

        s_k += 1;
      }
    } // end for(k=0;;k++) = while (stop != 1)
  } // end for i=0 to SPX_WOTS_LEN
  
  // thash(dest, pk_buffer, SPX_WOTS_LEN, ctx, pk_addr);
  () = #unspill(dest, pub_seed, pk_addr);
  pk_buffer_p = pk_buffer;
  dest = __thash_<SPX_WOTS_LEN>(dest, pk_buffer_p, pub_seed, pk_addr);

  () = #unspill(wots_sig, leaf_addr, pk_addr);

  return dest, wots_sig, leaf_addr, pk_addr;
}

#[returnaddress="stack"]
fn _wots_gen_leafx1(
  reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N],
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
  reg ptr u32[8], 
  reg ptr u32[8]
{
  dest, wots_sig, leaf_addr, pk_addr = __wots_gen_leafx1(dest, pub_seed, sk_seed, leaf_idx,
                                                         wots_sig, wots_sign_leaf, wots_steps,
                                                         leaf_addr, pk_addr);
  return dest, wots_sig, leaf_addr, pk_addr;                     
}

inline fn __wots_gen_leafx1_(
reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N],
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
  reg ptr u32[8], 
  reg ptr u32[8]
{
  dest = dest;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  leaf_idx = leaf_idx;
  wots_sig = wots_sig;
  wots_sign_leaf = wots_sign_leaf;
  wots_steps = wots_steps;
  leaf_addr = leaf_addr;
  pk_addr = pk_addr;

  dest, wots_sig, leaf_addr, pk_addr = _wots_gen_leafx1(dest, pub_seed, sk_seed, leaf_idx,
                                                        wots_sig, wots_sign_leaf, wots_steps,
                                                        leaf_addr, pk_addr);

  dest = dest;
  wots_sig = wots_sig;
  leaf_addr = leaf_addr;
  pk_addr = pk_addr;

  return dest, wots_sig, leaf_addr, pk_addr;
}

from Sphincs require "address/address.jinc"
from Sphincs require "hash/hash_shake.jtmpl"

inline fn __wots_gen_leafx1(
  reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u64 wots_sig,
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N], // dest
  reg ptr u32[8], // leaf_addr
  reg ptr u32[8] // pk_addr
{
  reg u32 wots_k;      // Spilling this with () # spill doenst work ???
  stack u32 s_wots_k;  // Spilling this with () # spill doenst work ???
  stack u32 s_wots_k_mask;
  
  reg u32 chain hash type;

  inline int i;

  stack   u8[SPX_WOTS_BYTES] pk_buffer;
  reg ptr u8[SPX_WOTS_BYTES] pk_buffer_p;
  reg ptr u8[SPX_N] buffer;

  stack u32 s_k;
  stack u8 stop;

  reg u64 offset;
  reg ptr u8[SPX_N] wots_sig_spx_n;

  // Initial spills
  () = #spill(dest, wots_sig, wots_steps, pub_seed, sk_seed);

  // if (leaf_idx == info->wots_sign_leaf) { wots_k_mask = 0; } else { wots_k_mask = (uint32_t)~0; }
  if (leaf_idx == wots_sign_leaf) { s_wots_k_mask = 0; } else { s_wots_k_mask = 0xFFFFFFFF; }

  // set_keypair_addr(leaf_addr, leaf_idx);
  leaf_addr = __set_keypair_addr(leaf_addr, leaf_idx);

  // set_keypair_addr(pk_addr, leaf_idx);
  pk_addr = __set_keypair_addr(pk_addr, leaf_idx);

  () = #spill(leaf_addr, pk_addr);

  // for (i = 0, buffer = pk_buffer; i < SPX_WOTS_LEN; i++, buffer += SPX_N)
  for i=0 to SPX_WOTS_LEN
  {
    // INVARIANTES:
    // wots_steps nao esta live
    // leaf_addr, pk_addr nao estao live

    // uint32_t wots_k = info->wots_steps[i] | wots_k_mask; 
    () = #unspill(wots_steps);
    wots_k = wots_steps[i];
    wots_k |= s_wots_k_mask;
    s_wots_k = wots_k;

    // set_chain_addr(leaf_addr, i);
    () = #unspill(leaf_addr);
    chain = i;
    leaf_addr = __set_chain_addr(leaf_addr, chain);

    // set_hash_addr(leaf_addr, 0);
    hash = 0;
    leaf_addr = __set_hash_addr(leaf_addr, hash);

    // set_type(leaf_addr, SPX_ADDR_TYPE_WOTSPRF);
    type = SPX_ADDR_TYPE_WOTSPRF;
    leaf_addr = __set_type(leaf_addr, type);
    () = #spill(leaf_addr);

    // prf_addr(buffer, ctx, leaf_addr);
    () = #unspill(pub_seed, sk_seed);
    buffer = pk_buffer[i*SPX_N : SPX_N];
    buffer = __prf_addr(buffer, pub_seed, sk_seed, leaf_addr);
    pk_buffer[i*SPX_N : SPX_N] = buffer;

    // set_type(leaf_addr, SPX_ADDR_TYPE_WOTS);
    () = #unspill(leaf_addr);
    type = SPX_ADDR_TYPE_WOTS;
    leaf_addr = __set_type(leaf_addr, type);
    () = #spill(leaf_addr);

    // for (k=0;; k++)
    s_k = 0;
    stop = 0; // we introduce stop to handle the corresponding 'break' statement
    while (stop != 1)
    {
      // if (k == wots_k) { memcpy( info->wots_sig + i * SPX_N, buffer, SPX_N ); }
      wots_k = s_wots_k;
      if (s_k == wots_k)
      {
        () = #unspill(wots_sig);
        offset = i*SPX_N;
        buffer = pk_buffer[i*SPX_N : SPX_N];
        wots_sig, _ = _x_memcpy_u8pu8<SPX_N>(wots_sig, offset, buffer);
        () = #spill(wots_sig);
      }

      // if (k == SPX_WOTS_W - 1) { break; }
      if (s_k == SPX_WOTS_W - 1) { stop = 1; }

      if (stop != 1)  // i.e. if we havent broken out of the loop yet
      {
        // set_hash_addr(leaf_addr, k);
        () = #unspill(leaf_addr);
        hash = s_k;
        leaf_addr = __set_hash_addr(leaf_addr, hash);
        () = #spill(leaf_addr);

        // thash(buffer, buffer, 1, ctx, leaf_addr);
        () = #unspill(pub_seed);
        buffer = pk_buffer[i*SPX_N : SPX_N];
        buffer = __thash_inplace_(buffer, pub_seed, leaf_addr);
        pk_buffer[i*SPX_N : SPX_N] = buffer;

        s_k += 1;
      }
    } // end for(k=0;;k++) = while (stop != 1)
  } // end for i=0 to SPX_WOTS_LEN
  
  // thash(dest, pk_buffer, SPX_WOTS_LEN, ctx, pk_addr);
  () = #unspill(dest, pub_seed, pk_addr);
  pk_buffer_p = pk_buffer;
  dest = __thash_<SPX_WOTS_LEN>(dest, pk_buffer_p, pub_seed, pk_addr);

  () = #unspill(leaf_addr, pk_addr);

  return dest, leaf_addr, pk_addr;
}

#[returnaddress="stack"]
fn _wots_gen_leafx1(
  reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u64 wots_sig, // this is changed through the pointer
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N],
  reg ptr u32[8], 
  reg ptr u32[8]
{
  dest, leaf_addr, pk_addr = __wots_gen_leafx1(dest, pub_seed, sk_seed, leaf_idx, wots_sig, 
                                               wots_sign_leaf, wots_steps, leaf_addr, pk_addr);

  return dest, leaf_addr, pk_addr;                     
}

inline fn __wots_gen_leafx1_(
reg ptr u8[SPX_N] dest,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u64 wots_sig, // this is changed through the pointer
  reg u32 wots_sign_leaf,
  reg ptr u32[SPX_WOTS_LEN] wots_steps,
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr
) ->
  reg ptr u8[SPX_N],
  reg ptr u32[8], 
  reg ptr u32[8]
{
  dest = dest;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  leaf_idx = leaf_idx;
  wots_sig = wots_sig;
  wots_sign_leaf = wots_sign_leaf;
  wots_steps = wots_steps;
  leaf_addr = leaf_addr;
  pk_addr = pk_addr;

  dest, leaf_addr, pk_addr = _wots_gen_leafx1(dest, pub_seed, sk_seed, leaf_idx, wots_sig, wots_sign_leaf, 
                                              wots_steps, leaf_addr, pk_addr);

  dest = dest;
  wots_sig = wots_sig;
  leaf_addr = leaf_addr;
  pk_addr = pk_addr;

  return dest, leaf_addr, pk_addr;
}

// TODO::  idx_offset is always zero
//        Because idx_offset is always zero, so is internal_idx_offset
inline fn __treehash_wots(
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N] auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u32[8] tree_addr,
  reg u64 wots_sig, // struct info
  reg u32 wots_sign_leaf, // struct info
  reg ptr u32[SPX_WOTS_LEN] wots_steps, // struct info
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr // struct info
) -> reg ptr u8[SPX_N],
     reg ptr u8[SPX_TREE_HEIGHT * SPX_N],
     reg ptr u32[8],
     reg ptr u32[8],
     reg ptr u32[8]
{
  stack u32 s_leaf_idx;
  stack u32 s_idx_offset;

  stack   u8[SPX_TREE_HEIGHT * SPX_N] nodes;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N] nodes_p;

  stack u8[2 * SPX_N] current;
  reg ptr u8[2 * SPX_N] current_p;
  reg ptr u8[SPX_N] current_0 current_1;

  reg u32 idx r_max_idx;
  stack u32 s_idx s_internal_idx_offset s_internal_idx s_internal_leaf s_h;
  stack u64 s_h_spx_n;

  inline u32 max_idx; // (1 << SPX_TREE_HEIGHT) - 1;

  stack u32 s_exit_outer_loop s_exit_inner_loop;

  reg u32 temp;
  reg u64 out_offset in_offset bytes;
  reg bool cond;

  reg u32 zero;

  s_idx_offset = 0;
  max_idx = (1 << SPX_TREE_HEIGHT) - 1;

  // Initial Spills
  () = #spill(root, auth_path, pub_seed, sk_seed, tree_addr, wots_sig, wots_sign_leaf, wots_steps, leaf_addr, pk_addr);
  s_leaf_idx = leaf_idx;

  // for (idx = 0;; idx++)
  s_idx = 0;
  s_exit_outer_loop = 0;
  while(s_exit_outer_loop == 0) {
    // gen_leaf( &current[SPX_N], ctx, idx + idx_offset, info);
    current_1 = current[SPX_N:SPX_N];
    temp = s_idx; temp += s_idx_offset; // temp =  idx + idx_offset
    () = #unspill(pub_seed, sk_seed, wots_sig, wots_sign_leaf, wots_steps, leaf_addr, pk_addr);
    // current[SPX_N:SPX_N], wots_sig, leaf_addr, pk_addr = _wots_gen_leafx1(current_1, pub_seed, sk_seed, 
    //                                                            temp, wots_sig, wots_sign_leaf, 
    //                                                            wots_steps, leaf_addr, pk_addr);
    () = #spill(wots_sig, leaf_addr, pk_addr);

    // uint32_t internal_idx_offset = idx_offset;
    // uint32_t internal_idx = idx;
    // uint32_t internal_leaf = leaf_idx;

    temp = s_idx_offset; s_internal_idx_offset = temp;
    temp = s_idx; s_internal_idx = temp;
    temp = s_leaf_idx; s_internal_leaf = temp;

    // for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
    s_h = 0;
    s_h_spx_n = 0;
    s_exit_inner_loop = 0;
    while(s_exit_inner_loop == 0) {
      // if (h == tree_height) { memcpy( root, &current[SPX_N], SPX_N ); return; }
      if(s_h == SPX_TREE_HEIGHT) {
        () = #unspill(root);
        out_offset = 0;
        current_1 = current[SPX_N:SPX_N];

        root, _ = _x_memcpy_u8u8<SPX_N, SPX_N>(root, out_offset, current_1);

        () = #spill(root);
        s_exit_inner_loop = 1;
        s_exit_outer_loop = 1;
      } else {
        // if ((internal_idx ^ internal_leaf) == 0x01)
        // { memcpy( &auth_path[ h * SPX_N ], &current[SPX_N], SPX_N ); }
        temp = s_internal_idx;
        temp ^= s_internal_leaf;
        if( temp == 1 )
        {
          () = #unspill(auth_path);
          out_offset = s_h_spx_n;
          current_1 = current[SPX_N : SPX_N];
          auth_path, _ = _x_memcpy_u8u8<SPX_TREE_HEIGHT * SPX_N, SPX_N>(auth_path, out_offset, current_1);
          () = #spill(auth_path);
        }
        
        // if ((internal_idx & 1) == 0 && idx < max_idx) { break; }
        temp = s_internal_idx; temp &= 1;
        zero = 0;
        idx = s_idx;
        r_max_idx = max_idx; // add inline int to conditions library to avoid this
        cond = __cond_u32_a_eq_b_and_c_below_d(temp, zero, idx, r_max_idx);

        if(cond)
        {
          s_exit_inner_loop = 1;
        } else {
          // internal_idx_offset >>= 1;
          // set_tree_height(tree_addr, h + 1);
          // set_tree_index(tree_addr, internal_idx/2 + internal_idx_offset );

          s_internal_idx_offset >>= 1;

          () = #unspill(tree_addr);
          temp = s_h; temp += 1;
          tree_addr = __set_tree_height(tree_addr, temp);

          temp = s_internal_idx; temp >>= 1; temp += s_internal_idx_offset;
          tree_addr = __set_tree_index(tree_addr, temp);
          () = #spill(tree_addr);      

          // unsigned char *left = &stack[h * SPX_N];
          // memcpy( &current[0], left, SPX_N );
          current_0 = current[0:SPX_N];
          out_offset = 0;
          nodes_p = nodes;
          in_offset = s_h_spx_n;
          bytes = SPX_N;

          current[0:SPX_N], _, _ =
              _x_memcpy_u8u8_2<SPX_N,SPX_TREE_HEIGHT*SPX_N>(current_0, out_offset, nodes_p, in_offset, bytes);

          // thash( &current[1 * SPX_N], &current[0 * SPX_N], 2, ctx, tree_addr);
          current_1 = current[SPX_N:SPX_N];
          current_p = current;
          () = #unspill(pub_seed, tree_addr);
          current[SPX_N:SPX_N] = __thash<2>(current_1, current_p, pub_seed, tree_addr);
        }
      }

      if(s_exit_inner_loop == 0) {
        s_h += 1;
        s_h_spx_n += SPX_N;
        s_internal_idx >>= 1;
        s_internal_leaf >>= 1;
      }
    } // end: C: for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
      // Jasmin: while(s_exit_inner_loop == 0)

    // memcpy( &stack[h * SPX_N], &current[SPX_N], SPX_N);
    if( s_exit_outer_loop == 0 ) {
      // no need to memcpy if s_exit_outer_loop == 1
      nodes_p = nodes;
      out_offset = s_h_spx_n;
      current_1 = current[SPX_N:SPX_N];
      nodes, _ = _x_memcpy_u8u8<SPX_TREE_HEIGHT*SPX_N,SPX_N>(nodes_p, out_offset, current_1);

      s_idx += 1;
    }
  } // end: C: for (idx = 0;; idx++) // Jasmin: while(s_exit_outer_loop == 0)

  () = #unspill(root, auth_path, tree_addr, wots_sig, leaf_addr, pk_addr);

  return root, auth_path, tree_addr, leaf_addr, pk_addr;
}

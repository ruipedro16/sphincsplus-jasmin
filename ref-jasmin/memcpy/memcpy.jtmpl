// ////////////////////////////////////////////////////////////////////////////
// copy u32 to u8, byte by byte

inline fn __memcpy_u8u32<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg ptr u32[INLEN] in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  reg u8 t;
  reg u64 i;

  i = 0;
  while( i < INLEN*4 )
  { t = in[u8 (int)i];
    out[(int)offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8u32<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg ptr u32[INLEN] in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out, offset = __memcpy_u8u32<OUTLEN,INLEN>(out, offset, in);
  return out, offset;
}//<>

inline fn _x_memcpy_u8u32<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg ptr u32[INLEN] in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out = out;
  offset = offset;
  in = in;

  out, offset = _memcpy_u8u32<OUTLEN,INLEN>(out, offset, in);

  out = out;
  offset = offset;

  return out, offset;
}//<>

// ////////////////////////////////////////////////////////////////////////////
// copy u8 to u8, byte by byte

inline fn __memcpy_u8u8<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg ptr u8[INLEN] in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  reg u8 t;
  reg u64 i;

  i = 0;
  while( i < INLEN )
  { t = in[(int)i];
    out[(int)offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8u8<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg ptr u8[INLEN] in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out, offset = __memcpy_u8u8<OUTLEN,INLEN>(out, offset, in);
  return out, offset;
}//<>

inline fn _x_memcpy_u8u8<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg ptr u8[INLEN] in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out = out;
  offset = offset;
  in = in;

  out, offset = _memcpy_u8u8<OUTLEN,INLEN>(out, offset, in);

  out = out;
  offset = offset;

  return out, offset;
}//<>

// ////////////////////////////////////////////////////////////////////////////
// copy (pointer) u8 to u8, byte by byte

inline fn __memcpy_u8u8p<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg u64 in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  reg u8 t;
  reg u64 i;

  i = 0;
  while( i < INLEN )
  { t = (u8)[in + i];
    out[(int)offset] = t;
    i += 1;
    offset += 1;
  }

  return out, offset;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8u8p<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg u64 in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out, offset = __memcpy_u8u8p<OUTLEN,INLEN>(out, offset, in);
  return out, offset;
}//<>

inline fn _x_memcpy_u8u8p<OUTLEN,INLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg u64 in)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out = out;
  offset = offset;
  in = in;

  out, offset = _memcpy_u8u8p<OUTLEN,INLEN>(out, offset, in);

  out = out;
  offset = offset;
  return out, offset;
}//<>


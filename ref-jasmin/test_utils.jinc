inline fn __zero_array_u32<INLEN>(reg ptr u32[INLEN] a) -> reg ptr u32[INLEN]
{
  inline int i;

  // INLEN / 2 because 1 u32 =) 4 bytes and 1 u64 = 8 bytes
  for i=0 to INLEN / 2 { a[u64 i] = 0; }
  for i=0 to INLEN % 2 { a[2*(INLEN/2) + i] = 0; }

  return a;
}//<>

// Used in wots
inline fn __ull_to_bytes(
  reg ptr u8[8] out,
  reg u64 in
) -> reg ptr u8[8]
{
  // for (i = (signed int)outlen - 1; i >= 0; i--) { out[i] = in & 0xff; in = in >> 8; }

  inline int i;

  for i=7 downto -1 {
    out[i] = (8u) in;
    in >>= 8;
  }

  return out;
}

inline fn __ull_to_bytes_t<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 in
) -> reg ptr u8[OUTLEN]
{
  inline int i;

  for i=OUTLEN-1 downto -1 {
    out[i] = (8u) in;
    in >>= 8;
  }

  return out;
}//<>

inline fn __bytes_to_ull<INLEN>(reg ptr u8[INLEN] in) -> reg u64 {
  inline int i;
  reg u64 result t;

  result = 0;
  for i=0 to INLEN - 1 {
    t = (64u) in[i];
    result |= t;
    result <<= 8;
  } 

  t = (64u) in[INLEN - 1];
  result |= t;

  return result;
}//<>

inline fn __bytes_to_ull__1_(reg u64 result, reg ptr u8[1] in) -> reg u64 {
  inline u64 shift_amount;
  reg u64 t;

  // uint64_t result = 0;
  result = (64u) in[0];

  return result;
}

//// TODO: The following functions are only used in tests (maybe they shouldnt be in this file)
inline fn __load_u8_array<INLEN>(
  reg ptr u8[INLEN] in,
  reg u64 addr
) -> reg ptr u8[INLEN] 
{
  reg u8 t;
  reg u64 i;

  i = 0;
  while(i < INLEN) { 
    t = (u8)[addr + i];
    in[i] = t;
    i += 1;
  }

  return in;
}//<>

inline fn __load_u32_array<INLEN>(
  reg ptr u32[INLEN] in,
  reg u64 addr
) -> reg ptr u32[INLEN] 
{
  reg u32 t;
  reg u64 i;

  i = 0;
  while(i < INLEN) { 
    t = (u32)[addr + 4*i];
    in[i] = t;
    i += 1;
  }

  return in;
}//<>

inline fn __load_u64_array<INLEN>(
  reg ptr u64[INLEN] in,
  reg u64 addr
) -> reg ptr u64[INLEN] 
{
  reg u64 t;
  reg u64 i;

  i = 0;
  while(i < INLEN) { 
    t = (u64)[addr + 8*i];
    in[i] = t;
    i += 1;
  }

  return in;
}//<>


inline fn __store_u8_array<INLEN>(
  reg ptr u8[INLEN] in,
  reg u64 addr
)
{
  reg u8 t;
  reg u64 i;

  i = 0;
  while (i < INLEN) { 
    t = in[i];
    (u8)[addr + i] = t;
    i += 1;
  }
}//<>

inline fn __store_u32_array<INLEN>(
  reg ptr u32[INLEN] in,
  reg u64 addr
)
{
  reg u32 t;
  reg u64 i;

  i = 0;
  while (i < INLEN) { 
    t = in[i];
    (u32)[addr + 4*i] = t;
    i += 1;
  }
}//<>

inline fn __store_u64_array<INLEN>(
  reg ptr u64[INLEN] in,
  reg u64 addr
)
{
  reg u64 t;
  reg u64 i;

  i = 0;
  while (i < INLEN) {
    t = in[i];
    [addr + 8 * i] = t;
    i += 1;
  }
}//<>

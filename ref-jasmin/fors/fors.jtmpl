from Sphincs require "address/address.jinc"
from Sphincs require "hash/hash_shake.jtmpl"
from Sphincs require "utils/utils.jinc"

////////////////// GEN SK /////////////////////////////////////////////////////

inline fn __fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __prf_addr(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

#[returnaddress="stack"]
fn _fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

inline fn __fors_gen_sk__(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  sk = _fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);
  
  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  return sk;
}

////////////////// SK TO LEAF /////////////////////////////////////////////////

inline fn __fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk, // INBLOCKS = 1 so SPX_N * INBLOCKS = SPX_N
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __thash_<1>(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

#[returnaddress="stack"]
fn _fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

inline fn __fors_sk_to_leaf__(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  leaf = _fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  return leaf;
}

////////////////// GEN LEAF ///////////////////////////////////////////////////
inline fn __fors_gen_leafx1(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr // void* info in ref impl
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u8[SPX_N] s_sk_seed;
  stack u32 s_addr_idx;
  stack ptr u32[8] s_fors_leaf_addr;
  
  inline int i; 
  reg u8 t;

  fors_leaf_addr = __set_tree_index(fors_leaf_addr, addr_idx);
  fors_leaf_addr = __set_type(fors_leaf_addr, SPX_ADDR_TYPE_FORSPRF);
  
  s_pub_seed = pub_seed; 
  s_sk_seed = sk_seed; 
  s_addr_idx = s_addr_idx; 
  s_fors_leaf_addr = fors_leaf_addr;

  leaf = __fors_gen_sk__(leaf, pub_seed, sk_seed, fors_leaf_addr); 
  
  fors_leaf_addr = s_fors_leaf_addr;
  fors_leaf_addr = __set_type(fors_leaf_addr, SPX_ADDR_TYPE_FORSTREE);

  pub_seed = s_pub_seed;
  leaf = __thash_inplace_(leaf, pub_seed, fors_leaf_addr);
  
  return leaf, fors_leaf_addr;
}

#[returnaddress="stack"]
fn _fors_gen_leafx1(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg mut ptr u32[8]
{
  leaf, fors_leaf_addr = __fors_gen_leafx1(leaf, pub_seed, sk_seed, addr_idx, fors_leaf_addr);
  return leaf, fors_leaf_addr;
}

inline fn __fors_gen_leafx1__(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  leaf = leaf; pub_seed = pub_seed; sk_seed = sk_seed; addr_idx = addr_idx; fors_leaf_addr = fors_leaf_addr;
  leaf, fors_leaf_addr = _fors_gen_leafx1(leaf, pub_seed, sk_seed, addr_idx, fors_leaf_addr);
  leaf = leaf; pub_seed = pub_seed; sk_seed = sk_seed; addr_idx = addr_idx; fors_leaf_addr = fors_leaf_addr;
  return leaf, fors_leaf_addr;
}

inline fn __message_to_indices(
  reg ptr u32[SPX_FORS_TREES] indices,
  reg u64 m // Assumes m contains at least SPX_FORS_HEIGHT * SPX_FORS_TREES bits.
) -> reg ptr u32[SPX_FORS_TREES]
{
  // TODO: Replace with while loops
  inline int i j;
  
  reg u64 offset zero;
  reg u64 t u z v;

  ?{}, zero = #set0();
  offset = 0;

  for i = 0 to SPX_FORS_TREES {
    indices[i] = zero;
    
    for j = 0 to SPX_FORS_HEIGHT {
      // indices[i] ^= ((m[offset >> 3] >> (~offset & 0x7)) & 0x1) << (SPX_FORS_HEIGHT-1-j);
      t = offset;
      t = #SHR(t, 3); // index to access m

      u = offset;  
      u = #NOT(u); 
      u &= 0x7;    

      z = [m + t];
      z = #SHR(z, u);

      z &= 0x1;
      v = SPX_FORS_HEIGHT;
      v -= 1;
      v -= j;
      z = #SHL(z, v);

      indices[i] ^= z;
      offset += 1;
    }
  }
  return indices;
}

// same as __message_to_indices but m is a reg ptr u8[MSG_LEN] instead of reg u64
inline fn __message_to_indices_t<MSG_LEN>(
  reg ptr u32[SPX_FORS_TREES] indices,
  reg ptr u8[MSG_LEN] m // Assumes m contains at least SPX_FORS_HEIGHT * SPX_FORS_TREES bits.
) -> reg ptr u32[SPX_FORS_TREES]
{
  // TODO: Replace with while loops
  inline int i j;
  
  reg u64 offset zero;
  reg u64 t u z v;

  ?{}, zero = #set0();
  offset = 0;

  for i = 0 to SPX_FORS_TREES {
    indices[i] = zero;
    
    for j = 0 to SPX_FORS_HEIGHT {
      // indices[i] ^= ((m[offset >> 3] >> (~offset & 0x7)) & 0x1) << (SPX_FORS_HEIGHT-1-j);
      t = offset;
      t = #SHR(t, 3);

      u = offset;
      u = #NOT(u); 
      u &= 0x7; 

      z = (64u) m[(int) t]; // only this line is different 
      z = #SHR(z, u);

      z &= 0x1;
      v = SPX_FORS_HEIGHT;
      v -= 1;
      v -= j;
      z = #SHL(z, v);

      indices[i] ^= z;
      offset += 1;
    }
  }
  return indices;
}//<>

/////////////////// TREEHASH ////////////////////////////////////////
// for treehash in fors, tree_height is always SPX_FORS_HEIGHT
inline fn treehash_fors(
  reg ptr u8[SPX_FORS_TREES * SPX_N] roots,
  reg u64 auth_path,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[8] tree_addr,
  reg ptr u32[8] info
)
{

}


/////////////////// FORS SIGN ///////////////////////////////////////
inline fn __fors_sign<MSG_LEN>(
  reg u64 sig,
  reg ptr u8[SPX_FORS_PK_BYTES] pk,
  reg ptr u8[MSG_LEN] m,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_addr

) 
{
  /////////////////////////////////////////////// spills
  stack u64 s_sig;
  stack ptr u8[SPX_FORS_PK_BYTES] s_pk;
  stack ptr u8[MSG_LEN] s_m;
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u8[SPX_N] s_sk_seed;
  stack ptr u32[8] s_fors_addr;
  
  /////////////////////////////////////////////// variable decl

  stack u32[SPX_FORS_TREES] indices;
  stack u8[SPX_FORS_TREES * SPX_N] roots;
  stack u32[8] fors_tree_addr;
  stack u32[8] fors_leaf_addr;
  stack u32[8] fors_pk_addr;

  stack u8[SPX_N] sig_array;

  reg u32 idx_offset;
  inline int i;

  reg u32 t;

  stack u32 s_idx_offset s_t;

  fors_tree_addr = __zero_array_u32<8>(fors_tree_addr);
  fors_leaf_addr = __zero_array_u32<8>(fors_leaf_addr); // struct fors_gen_leaf_info 
  fors_pk_addr   = __zero_array_u32<8>(fors_pk_addr);

  fors_tree_addr = __copy_keypair_addr(fors_tree_addr, fors_addr);
  fors_leaf_addr = __copy_keypair_addr(fors_leaf_addr, fors_addr);

  fors_pk_addr   = __copy_keypair_addr(fors_pk_addr, fors_addr);
  fors_pk_addr = __set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);

  indices = __message_to_indices_t<MSG_LEN>(indices, m);

  
  for i=0 to SPX_FORS_TREES { // TODO: FIXME: Replace with a while loop
    idx_offset = 1;
    idx_offset = #SHL_32(idx_offset, SPX_FORS_HEIGHT);
    idx_offset *= i;

    fors_tree_addr = __set_tree_height(fors_tree_addr, 0);

    t = indices[i]; 
    t += idx_offset; 
    fors_tree_addr = __set_tree_index(fors_tree_addr, t);

    fors_tree_addr = __set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSPRF);

    sig_array = __load_u8_array<SPX_N>(sig_array, sig); // FIXME: impl __fors_gen_sk__ that writes to reg u64

    // spill
    s_sig = sig;
    s_pub_seed = pub_seed;
    s_sk_seed = sk_seed;

    sig_array = __fors_gen_sk__(sig_array, pub_seed, sk_seed, fors_tree_addr);

    sig = s_sig; // unspill
    __store_u8_array<SPX_N>(sig_array, sig); // FIXME: Ã© preciso um shake em q o input e um reg ptr mas o output e um reg u64

    fors_tree_addr = __set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);
    sig += SPX_N;

    // TODO: Call to treehash here

    sig += SPX_N * SPX_FORS_HEIGHT;

    // unspill data needed for the next iteration
    pub_seed = s_pub_seed;
    sk_seed = s_sk_seed;
  }

}//<>

////////////////////////////////// PK FROM SIG //////////////////////

inline fn __fors_pk_from_sig<MSG_LEN>(
  reg ptr u8[SPX_N] pk, // root
  reg u64 sig,
  reg ptr u8[MSG_LEN] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_addr
)
{

}//<>

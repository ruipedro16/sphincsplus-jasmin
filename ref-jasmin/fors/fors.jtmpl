from Sphincs require "address/address.jinc"
from Sphincs require "hash/hash_shake.jtmpl"
from Sphincs require "utils/utils.jinc"
from Sphincs require "generic/conditions.jinc"

////////////////// GEN SK /////////////////////////////////////////////////////

inline fn __fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __prf_addr(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

#[returnaddress="stack"]
fn _fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

inline fn __fors_gen_sk__(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  sk = _fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);

  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  return sk;
}

///// GEN SK BUT SK IS A REG U64 INSTEAD OF REG PTR U8[SPX_N]

fn _fors_gen_sk_out_u64(
  reg u64 sk, // reg ptr u8[SPX_N] sk
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
)
{
  __prf_addr_out_u64(sk, pub_seed, sk_seed, fors_leaf_addr);
}

inline fn __fors_gen_sk_out_u64(
  reg u64 sk, // reg ptr u8[SPX_N] sk
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
)
{
  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  _fors_gen_sk_out_u64(sk, pub_seed, sk_seed, fors_leaf_addr);
}

////////////////// SK TO LEAF /////////////////////////////////////////////////

inline fn __fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk, // INBLOCKS = 1 so SPX_N * INBLOCKS = SPX_N
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __thash_<1>(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

#[returnaddress="stack"]
fn _fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

inline fn __fors_sk_to_leaf__(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  leaf = _fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  return leaf;
}

////////////////// SK TO LEAF BUT LEAF IS A REG U64 INSTEAD OF A REG PTR U8[SPX_N]

inline fn __fors_sk_to_leaf_in_u64(
  reg ptr u8[SPX_N] leaf,
  reg u64 sk, // reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __thash_in_u64_<1>(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

#[returnaddress="stack"]
fn _fors_sk_to_leaf_in_u64(
  reg ptr u8[SPX_N] leaf,
  reg u64 sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __fors_sk_to_leaf_in_u64(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

inline fn __fors_sk_to_leaf_in_u64_(
  reg ptr u8[SPX_N] leaf,
  reg u64 sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  leaf = _fors_sk_to_leaf_in_u64(leaf, sk, pub_seed, fors_leaf_addr);
  leaf = leaf;
  return leaf;
}

////////////////// GEN LEAF ///////////////////////////////////////////////////
inline fn __fors_gen_leafx1(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr // void* info in ref impl
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  stack ptr u32[8] s_fors_leaf_addr;

  reg u32 type;

  // set_tree_index(fors_leaf_addr, addr_idx);
  fors_leaf_addr = __set_tree_index(fors_leaf_addr, addr_idx);

  // set_type(fors_leaf_addr, SPX_ADDR_TYPE_FORSPRF);
  type = SPX_ADDR_TYPE_FORSPRF;
  fors_leaf_addr = __set_type(fors_leaf_addr, type);

  // fors_gen_sk(leaf, ctx, fors_leaf_addr);
  () = #spill(pub_seed, fors_leaf_addr);

  leaf = __fors_gen_sk__(leaf, pub_seed, sk_seed, fors_leaf_addr);

  // set_type(fors_leaf_addr, SPX_ADDR_TYPE_FORSTREE);
  () = #unspill(fors_leaf_addr);
  type = SPX_ADDR_TYPE_FORSTREE;
  fors_leaf_addr = __set_type(fors_leaf_addr, type);

  // fors_sk_to_leaf(leaf, leaf, ctx, fors_leaf_addr); == thash(leaf, sk, 1, ctx, fors_leaf_addr);
  () = #unspill(pub_seed);
  leaf = __thash_inplace_(leaf, pub_seed, fors_leaf_addr);

  return leaf, fors_leaf_addr;
}

#[returnaddress="stack"]
fn _fors_gen_leafx1(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg mut ptr u32[8]
{
  leaf, fors_leaf_addr = __fors_gen_leafx1(leaf, pub_seed, sk_seed, addr_idx, fors_leaf_addr);
  return leaf, fors_leaf_addr;
}

inline fn __fors_gen_leafx1__(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  leaf = leaf; pub_seed = pub_seed; sk_seed = sk_seed; addr_idx = addr_idx; fors_leaf_addr = fors_leaf_addr;
  leaf, fors_leaf_addr = _fors_gen_leafx1(leaf, pub_seed, sk_seed, addr_idx, fors_leaf_addr);
  leaf = leaf; fors_leaf_addr = fors_leaf_addr;
  return leaf, fors_leaf_addr;
}

inline fn __message_to_indices_t<MSG_LEN>(
  reg ptr u32[SPX_FORS_TREES] indices,
  reg ptr u8[MSG_LEN] m // Assumes m contains at least SPX_FORS_HEIGHT * SPX_FORS_TREES bits.
) -> reg ptr u32[SPX_FORS_TREES]
{
  reg u64 i j;

  reg u64 offset zero;
  reg u64 t u z v;

  ?{}, zero = #set0();
  offset = 0;

  ?{}, i = #set0();
  while (i < SPX_FORS_TREES)
  {
    indices[i] = zero;

    ?{}, j = #set0();
    while (j < SPX_FORS_HEIGHT)
    {
      // indices[i] ^= ((m[offset >> 3] >> (~offset & 0x7)) & 0x1) << (SPX_FORS_HEIGHT-1-j);
      t = offset;
      ?{}, t = #SHR(t, 3);

      u = offset;
      u = #NOT(u);
      u &= 0x7;

      z = (64u) m[t]; // only this line is different
      ?{}, z = #SHR(z, u);

      z &= 0x1;
      v = SPX_FORS_HEIGHT;
      v -= 1;
      v -= j;
      ?{}, z = #SHL(z, v);

      indices[i] ^= z;
      offset += 1;

      j += 1;
    }

    i += 1;
  }
  return indices;
}//<>


// /////////////////////////////////////////////////////////////////////////////

// for treehash in fors, tree_height is always SPX_FORS_HEIGHT
inline fn __treehash_fors(
  reg ptr u8[SPX_N] root,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[8] tree_addr,
  reg ptr u32[8] info)
  ->
  reg ptr u8[SPX_N], // root
  reg ptr u32[8], // tree_addr
  reg ptr u32[8] // info
{
  stack u32 s_leaf_idx;
  stack u32 s_idx_offset;

  //
  stack u8[SPX_FORS_HEIGHT * SPX_N] nodes; // in C implementation: "stack"
  reg ptr u8[SPX_FORS_HEIGHT * SPX_N] nodes_p;

  stack u8[2 * SPX_N] current;
  reg ptr u8[2 * SPX_N] current_p;
  reg ptr u8[SPX_N] current_0 current_1;

  reg u32 idx r_max_idx;
  stack u32 s_idx s_internal_idx_offset s_internal_idx s_internal_leaf s_h;
  stack u64 s_h_spx_n;

  inline u32 max_idx; // (1 << SPX_FORS_HEIGHT) - 1;

  //
  stack u32 s_exit_outer_loop s_exit_inner_loop;

  reg u32 temp;
  reg u64 out_offset in_offset bytes;
  reg bool cond;

  reg u32 zero;

  //

  () = #spill(root, auth_path, pub_seed, sk_seed, tree_addr, info);
  s_leaf_idx = leaf_idx;
  s_idx_offset = idx_offset;
  //

  max_idx = (1 << SPX_FORS_HEIGHT) - 1;

  // for (idx = 0;; idx++)
  s_idx = 0;
  s_exit_outer_loop = 0;
  while(s_exit_outer_loop == 0)
  {

    // gen_leaf( &current[SPX_N], ctx, idx + idx_offset, info);

      current_1 = current[SPX_N:SPX_N];
      temp = s_idx; temp += s_idx_offset; // temp =  idx + idx_offset
      () = #unspill(pub_seed, sk_seed, info);

    current[SPX_N:SPX_N], info = __fors_gen_leafx1__(current_1,
                                                       pub_seed,
                                                       sk_seed,
                                                       temp,
                                                       info);

    () = #spill(info);

    // uint32_t internal_idx_offset = idx_offset;
    // uint32_t internal_idx = idx;
    // uint32_t internal_leaf = leaf_idx;

    temp = s_idx_offset; s_internal_idx_offset = temp;
    temp = s_idx; s_internal_idx = temp;
    temp = s_leaf_idx; s_internal_leaf = temp;

    // for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
    s_h = 0;
    s_h_spx_n = 0;
    s_exit_inner_loop = 0;
    while(s_exit_inner_loop == 0)
    {
      // if (h == tree_height) { memcpy( root, &current[SPX_N], SPX_N ); return; }
      if(s_h == SPX_FORS_HEIGHT)
      {
          () = #unspill(root);
          out_offset = 0;
          current_1 = current[SPX_N:SPX_N];

        root, _ = _x_memcpy_u8u8<SPX_N, SPX_N>(root, out_offset, current_1);

          () = #spill(root);
          s_exit_inner_loop = 1;
          s_exit_outer_loop = 1;
      }
      else
      {
        // if ((internal_idx ^ internal_leaf) == 0x01)
        // { memcpy( &auth_path[ h * SPX_N ], &current[SPX_N], SPX_N ); }
        temp = s_internal_idx;
        temp ^= s_internal_leaf;
        if( temp == 1 )
        {
            () = #unspill(auth_path);
            out_offset = s_h_spx_n;
            current_1 = current[SPX_N : SPX_N];

          _, _ = _x_memcpy_u8pu8<SPX_N>(auth_path, out_offset, current_1);

        }

        // if ((internal_idx & 1) == 0 && idx < max_idx) { break; }

          temp = s_internal_idx; temp &= 1;
          zero = 0;
          idx = s_idx;
          r_max_idx = max_idx; // add inline int to conditions library to avoid this

        cond = __cond_u32_a_eq_b_and_c_below_d(temp, zero, idx, r_max_idx);

        if(cond)
        {
          s_exit_inner_loop = 1;
        }
        else
        {
          // internal_idx_offset >>= 1;
          // set_tree_height(tree_addr, h + 1);
          // set_tree_index(tree_addr, internal_idx/2 + internal_idx_offset );

          s_internal_idx_offset >>= 1;

          () = #unspill(tree_addr);
          temp = s_h; temp += 1;
          tree_addr = __set_tree_height(tree_addr, temp);

          temp = s_internal_idx; temp >>= 1; temp += s_internal_idx_offset;
          tree_addr = __set_tree_index(tree_addr, temp);
          () = #spill(tree_addr);

          // unsigned char *left = &stack[h * SPX_N];
          // memcpy( &current[0], left, SPX_N );
              current_0 = current[0:SPX_N];
              out_offset = 0;
              nodes_p = nodes;
              in_offset = s_h_spx_n;
              bytes = SPX_N;

          current[0:SPX_N], _, _ =
            _x_memcpy_u8u8_2<SPX_N,SPX_FORS_HEIGHT*SPX_N>(current_0,
                                                          out_offset,
                                                          nodes_p,
                                                          in_offset,
                                                          bytes);

          // thash( &current[1 * SPX_N], &current[0 * SPX_N], 2, ctx, tree_addr);

            current_1 = current[SPX_N:SPX_N];
            current_p = current;
            () = #unspill(pub_seed, tree_addr);

          current[SPX_N:SPX_N] = __thash<2>(current_1, current_p, pub_seed, tree_addr);
        }
      }

      if( s_exit_inner_loop == 0 )
      {
        s_h += 1;
        s_h_spx_n += SPX_N;
        s_internal_idx >>= 1;
        s_internal_leaf >>= 1;
      }

    } // end: C: for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
      //      Jasmin: while(s_exit_inner_loop == 0)

    // memcpy( &stack[h * SPX_N], &current[SPX_N], SPX_N);
    if( s_exit_outer_loop == 0 )
    {
      // no need to memcpy if s_exit_outer_loop == 1
        nodes_p = nodes;
        out_offset = s_h_spx_n;
        current_1 = current[SPX_N:SPX_N];

      nodes, _ = _x_memcpy_u8u8<SPX_FORS_HEIGHT*SPX_N,SPX_N>(nodes_p,
                                                             out_offset,
                                                             current_1);
      s_idx += 1;
    }
  } // end: C: for (idx = 0;; idx++) // Jasmin: while(s_exit_outer_loop == 0)


  () = #unspill(root, tree_addr, info);

  return root, tree_addr, info;
}

#[returnaddress="stack"]
fn _treehash_fors(
  reg ptr u8[SPX_N] root,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[8] tree_addr,
  reg ptr u32[8] info
) -> reg ptr u8[SPX_N], reg ptr u32[8], reg ptr u32[8]
{
  root, tree_addr, info = __treehash_fors(root,
                                          auth_path,
                                          pub_seed,
                                          sk_seed,
                                          leaf_idx,
                                          idx_offset,
                                          tree_addr,
                                          info);
  return root, tree_addr, info;
}

inline fn __treehash_fors_(
  reg ptr u8[SPX_N] root,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[8] tree_addr,
  reg ptr u32[8] info
) -> reg ptr u8[SPX_N], reg ptr u32[8], reg ptr u32[8]
{
  root = root; auth_path = auth_path; pub_seed = pub_seed; sk_seed = sk_seed;
  leaf_idx = leaf_idx; idx_offset = idx_offset; tree_addr = tree_addr;
  info = info;

  root, tree_addr, info = _treehash_fors(root,
                                         auth_path,
                                         pub_seed,
                                         sk_seed,
                                         leaf_idx,
                                         idx_offset,
                                         tree_addr,
                                         info);

  root = root;
  tree_addr = tree_addr;
  info = info;

  return root, tree_addr, info;
}

// /////////////////////////////////////////////////////////////////////////////


/////////////////// FORS SIGN ///////////////////////////////////////
inline fn __fors_sign(
  reg u64 sig, // we write to here
  reg ptr u8[SPX_FORS_PK_BYTES] pk,
  reg ptr u8[SPX_FORS_MSG_BYTES] m,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_FORS_PK_BYTES]
{
  stack u64 s_sig; // spill

  stack u32[SPX_FORS_TREES] indices;
  reg ptr u32[SPX_FORS_TREES] indices_p;
  
  stack u8[SPX_FORS_TREES * SPX_N] roots;
  reg ptr u8[SPX_FORS_TREES * SPX_N] roots_p;

  stack u32[8] fors_tree_addr;
  reg ptr u32[8] fors_tree_addr_p;

  stack u32[8] fors_leaf_addr;
  reg ptr u32[8] fors_leaf_addr_p;

  stack u32[8] fors_pk_addr;
  reg ptr u32[8] fors_pk_addr_p;

  reg u32 idx_offset;
  stack u32 s_idx_offset;
  inline int i;

  reg u32 t;

  reg u32 type height;

  reg ptr u8[SPX_N] buf;

  //////////////////////////////////////////////////// Initial spills (start from a clean state)
  s_sig = sig;
  () = #spill(pk, m, pub_seed, sk_seed);

  ////////////////////////////////////////////////////

  fors_tree_addr_p = fors_tree_addr;
  fors_tree_addr_p = __zero_array_u32<8>(fors_tree_addr_p);
  fors_tree_addr = fors_tree_addr_p;

  fors_leaf_addr_p = fors_leaf_addr;
  fors_leaf_addr_p = __zero_array_u32<8>(fors_leaf_addr_p); // struct fors_gen_leaf_info
  fors_leaf_addr = fors_leaf_addr_p;

  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __zero_array_u32<8>(fors_pk_addr_p);
  fors_pk_addr = fors_pk_addr_p;

  // copy_keypair_addr(fors_tree_addr, fors_addr);
  fors_tree_addr_p = fors_tree_addr;
  fors_tree_addr_p = __copy_keypair_addr(fors_tree_addr_p, fors_addr);
  fors_tree_addr = fors_tree_addr_p;

  // copy_keypair_addr(fors_leaf_addr, fors_addr);
  fors_leaf_addr_p = fors_leaf_addr;
  fors_leaf_addr_p = __copy_keypair_addr(fors_leaf_addr_p, fors_addr);
  fors_leaf_addr = fors_leaf_addr_p;

  // copy_keypair_addr(fors_pk_addr, fors_addr);
  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __copy_keypair_addr(fors_pk_addr_p, fors_addr);

  // set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);
  type = SPX_ADDR_TYPE_FORSPK;
  fors_pk_addr_p = __set_type(fors_pk_addr_p, type);
  fors_pk_addr = fors_pk_addr_p;

  () = #unspill(m);
  indices_p = indices;
  indices_p = __message_to_indices_t<SPX_FORS_MSG_BYTES>(indices_p, m);
  indices = indices_p;

  for i=0 to SPX_FORS_TREES {
    // idx_offset = i * (1 << SPX_FORS_HEIGHT); 
    idx_offset = 1;
    ?{}, idx_offset = #SHL_32(idx_offset, SPX_FORS_HEIGHT);
    idx_offset *= i;
    s_idx_offset = idx_offset;

    // set_tree_height(fors_tree_addr, 0);
    fors_tree_addr_p = fors_tree_addr;
    height = 0;
    fors_tree_addr_p = __set_tree_height(fors_tree_addr_p, height);

    // set_tree_index(fors_tree_addr, indices[i] + idx_offset);
    t = indices[i];
    t += s_idx_offset;
    fors_tree_addr_p = __set_tree_index(fors_tree_addr_p, t);

    // set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);
    type = SPX_ADDR_TYPE_FORSPRF;
    fors_tree_addr_p = __set_type(fors_tree_addr_p, type);
    fors_tree_addr = fors_tree_addr_p;

    // fors_gen_sk(sig, ctx, fors_tree_addr);
    sig = s_sig;
    () = #unspill(pub_seed, sk_seed);
    __fors_gen_sk_out_u64(sig, pub_seed, sk_seed, fors_tree_addr_p);
    fors_tree_addr = fors_tree_addr_p;

    // set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);
    fors_tree_addr_p = fors_tree_addr;
    type = SPX_ADDR_TYPE_FORSTREE;
    fors_tree_addr_p = __set_type(fors_tree_addr_p, type);
    fors_tree_addr = fors_tree_addr_p;
    
    // sig += SPX_N;
    s_sig += SPX_N;

    // treehashx1(roots + i*SPX_N, sig, ctx, 
    //            indices[i], idx_offset, SPX_FORS_HEIGHT, fors_gen_leafx1,
    //            fors_tree_addr, &fors_info);
    sig = s_sig;
    () = #unspill(pub_seed, sk_seed);
    t = indices[i];
    idx_offset = s_idx_offset;
    buf = roots[i*SPX_N:SPX_N];
    fors_tree_addr_p = fors_tree_addr;
    fors_leaf_addr_p = fors_leaf_addr;
    buf, fors_tree_addr_p, fors_leaf_addr_p = __treehash_fors_(buf, sig, pub_seed,
                                                               sk_seed, t, idx_offset, 
                                                               fors_tree_addr_p,
                                                               fors_leaf_addr_p);
    
    roots[i*SPX_N:SPX_N] = buf;
    fors_tree_addr = fors_tree_addr_p;
    fors_leaf_addr = fors_leaf_addr_p;

    // sig += SPX_N * SPX_FORS_HEIGHT;
    s_sig += SPX_N * SPX_FORS_HEIGHT;
  }

  roots_p = roots;
  () = #unspill(pk, pub_seed);
  fors_pk_addr_p = fors_pk_addr;
  pk = __thash<SPX_FORS_TREES>(pk, roots_p, pub_seed, fors_pk_addr_p);

  return pk;
}//<>


#[returnaddress="stack"]
fn _fors_sign(
  reg u64 sig, // we write to here
  reg ptr u8[SPX_FORS_PK_BYTES] pk,
  reg ptr u8[SPX_FORS_MSG_BYTES] m,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_FORS_PK_BYTES]
{
  pk = __fors_sign(sig, pk, m, pub_seed, sk_seed, fors_addr);
  return pk;
}

////////////////////////////////// PK FROM SIG //////////////////////

inline fn __fors_pk_from_sig(
  reg ptr u8[SPX_N] pk, // root
  reg u64 sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  /////////////////////////////////////////
  stack u64 s_sig;
  /////////////////////////////////////////
  
  stack u32[SPX_FORS_TREES] indices;
  reg ptr u32[SPX_FORS_TREES] indices_p;

  stack u8[SPX_FORS_TREES * SPX_N] roots;
  reg ptr u8[SPX_FORS_TREES * SPX_N] roots_p;
  
  stack u8[SPX_N] leaf;
  reg ptr u8[SPX_N] leaf_p;
  
  stack u32[8] fors_tree_addr;
  reg ptr u32[8] fors_tree_addr_p;
  
  stack u32[8] fors_pk_addr;
  reg ptr u32[8] fors_pk_addr_p;
  
  reg u32 idx_offset t;
  
  stack u32 s_idx_offset;
  
  inline int i;

  reg ptr u8[SPX_N] buf;

  reg u32 type height;

  ///////////////////////////// Initial spills (start from a clean state)
  s_sig = sig;
  () = #spill(pk, pub_seed, msg);
  /////////////////////////////

  fors_tree_addr_p = fors_tree_addr;
  fors_tree_addr_p = __zero_array_u32<8>(fors_tree_addr_p);
  fors_tree_addr = fors_tree_addr_p;

  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __zero_array_u32<8>(fors_pk_addr_p);
  fors_pk_addr = fors_pk_addr_p;

  // copy_keypair_addr(fors_tree_addr, fors_addr);
  fors_tree_addr_p = fors_tree_addr;
  fors_tree_addr_p = __copy_keypair_addr(fors_tree_addr_p, fors_addr);

  // copy_keypair_addr(fors_pk_addr, fors_addr);
  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __copy_keypair_addr(fors_pk_addr_p, fors_addr);
  fors_pk_addr = fors_pk_addr_p;
  
  // set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);
  type = SPX_ADDR_TYPE_FORSTREE;
  fors_tree_addr_p = __set_type(fors_tree_addr_p, type);
  fors_tree_addr = fors_tree_addr_p;

  // set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);
  type = SPX_ADDR_TYPE_FORSPK;
  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __set_type(fors_pk_addr_p, type);
  fors_pk_addr = fors_pk_addr_p;
  
  // message_to_indices(indices, m);
  () = #unspill(msg);
  indices_p = indices;
  indices = __message_to_indices_t<SPX_FORS_MSG_BYTES>(indices_p, msg);
  indices_p = indices;

  for i=0 to SPX_FORS_TREES {
    // idx_offset = i * (1 << SPX_FORS_HEIGHT);
    idx_offset = 1;
    ?{}, idx_offset = #SHL_32(idx_offset, SPX_FORS_HEIGHT);
    idx_offset *= i;
    s_idx_offset = idx_offset; // spill
    
    // set_tree_height(fors_tree_addr, 0);
    fors_tree_addr_p = fors_tree_addr;
    height = 0;
    fors_tree_addr_p = __set_tree_height(fors_tree_addr_p, height);
    fors_tree_addr = fors_tree_addr_p;

    // set_tree_index(fors_tree_addr, indices[i] + idx_offset);
    t = indices[i];
    t += s_idx_offset;
    fors_tree_addr_p = fors_tree_addr;
    fors_tree_addr_p = __set_tree_index(fors_tree_addr_p, t);
    fors_tree_addr = fors_tree_addr_p;

    // fors_sk_to_leaf(leaf, sig, ctx, fors_tree_addr);
      sig = s_sig;
      () = #unspill(pub_seed);
      leaf_p = leaf;
      fors_tree_addr_p = fors_tree_addr;
    leaf_p = __fors_sk_to_leaf_in_u64_(leaf_p, sig, pub_seed, fors_tree_addr_p);
      leaf = leaf_p;
      sig = s_sig;
    
    // sig += SPX_N;
    s_sig += SPX_N;

    // compute_root(roots + i*SPX_N, leaf, indices[i], idx_offset, sig, SPX_FORS_HEIGHT, ctx, fors_tree_addr);
    t = indices[i];
    idx_offset = s_idx_offset;
    sig = s_sig;
    () = #unspill(pub_seed);
    buf = roots[i*SPX_N : SPX_N];
    leaf_p = leaf;
    fors_tree_addr_p = fors_tree_addr;
    height = SPX_FORS_HEIGHT;
    buf, fors_tree_addr_p = __compute_root(buf, leaf_p, 
                                         t, idx_offset,
                                         sig, height, 
                                         pub_seed, fors_tree_addr_p);
    roots[i*SPX_N : SPX_N] = buf;
    fors_tree_addr = fors_tree_addr_p;
    s_sig += SPX_N * SPX_FORS_HEIGHT;
  }

  () = #unspill(pk, pub_seed);
  roots_p = roots;
  fors_pk_addr_p = fors_pk_addr;
  pk = __thash<SPX_FORS_TREES>(pk, roots_p, pub_seed, fors_pk_addr_p);
  return pk;
}

#[returnaddress="stack"]
fn _fors_pk_from_sig(
  reg ptr u8[SPX_N] pk, // root
  reg u64 sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  pk = __fors_pk_from_sig(pk, sig, msg, pub_seed, fors_addr);
  return pk;
}

inline fn __fors_pk_from_sig_(
  reg ptr u8[SPX_N] pk, // root
  reg u64 sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  pk = pk; sig = sig; msg = msg; pub_seed = pub_seed; fors_addr = fors_addr;

  pk = _fors_pk_from_sig(pk, sig, msg, pub_seed, fors_addr);

  pk = pk;
  return pk;
}

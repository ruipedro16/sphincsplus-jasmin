from Sphincs require "address/address.jinc"
from Sphincs require "hash/hash_shake.jtmpl"
from Sphincs require "utils/utils.jinc"

////////////////// GEN SK /////////////////////////////////////////////////////

inline fn __fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __prf_addr(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

#[returnaddress="stack"]
fn _fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

inline fn __fors_gen_sk__(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  sk = _fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);
  
  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  return sk;
}

////////////////// SK TO LEAF /////////////////////////////////////////////////

inline fn __fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk, // INBLOCKS = 1 so SPX_N * INBLOCKS = SPX_N
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __thash_<1>(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

#[returnaddress="stack"]
fn _fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

inline fn __fors_sk_to_leaf__(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  leaf = _fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  return leaf;
}

////////////////// GEN LEAF ///////////////////////////////////////////////////
inline fn __fors_gen_leafx1(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr // void* info in ref impl
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u8[SPX_N] s_sk_seed;
  stack u32 s_addr_idx;
  stack ptr u32[8] s_fors_leaf_addr;
  
  inline int i; 
  reg u8 t;

  fors_leaf_addr = __set_tree_index(fors_leaf_addr, addr_idx);
  fors_leaf_addr = __set_type(fors_leaf_addr, SPX_ADDR_TYPE_FORSPRF);
  
  s_pub_seed = pub_seed; 
  s_sk_seed = sk_seed; 
  s_addr_idx = s_addr_idx; 
  s_fors_leaf_addr = fors_leaf_addr;

  leaf = __fors_gen_sk__(leaf, pub_seed, sk_seed, fors_leaf_addr); 
  
  fors_leaf_addr = s_fors_leaf_addr;
  fors_leaf_addr = __set_type(fors_leaf_addr, SPX_ADDR_TYPE_FORSTREE);

  pub_seed = s_pub_seed;
  leaf = __thash_inplace_(leaf, pub_seed, fors_leaf_addr);
  
  return leaf, fors_leaf_addr;
}

#[returnaddress="stack"]
fn _fors_gen_leafx1(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg mut ptr u32[8]
{
  leaf, fors_leaf_addr = __fors_gen_leafx1(leaf, pub_seed, sk_seed, addr_idx, fors_leaf_addr);
  return leaf, fors_leaf_addr;
}

inline fn __fors_gen_leafx1__(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  leaf = leaf; pub_seed = pub_seed; sk_seed = sk_seed; addr_idx = addr_idx; fors_leaf_addr = fors_leaf_addr;
  leaf, fors_leaf_addr = _fors_gen_leafx1(leaf, pub_seed, sk_seed, addr_idx, fors_leaf_addr);
  leaf = leaf; pub_seed = pub_seed; sk_seed = sk_seed; addr_idx = addr_idx; fors_leaf_addr = fors_leaf_addr;
  return leaf, fors_leaf_addr;
}

inline fn __message_to_indices(
  reg ptr u32[SPX_FORS_TREES] indices,
  reg u64 m // Assumes m contains at least SPX_FORS_HEIGHT * SPX_FORS_TREES bits.
) -> reg ptr u32[SPX_FORS_TREES]
{
  // TODO: Replace with while loops
  inline int i j;
  
  reg u64 offset zero;
  reg u64 t u z;

  ?{}, zero = #set0();
  offset = 0;

  for i = 0 to SPX_FORS_TREES {
    indices[i] = zero;
    
    for j = 0 to SPX_FORS_HEIGHT {
      t = offset;
      t = #SHR(t, 3); // at this point t = offset >> 3

      u = offset;
      u &= 0x7; // at this point u = 0ffset & 0x7

      z = [m + t]; // at this point z = m[t] = m[offset >> 3]
      z = #SHR(z, u); // at this point z = m[offset >> 3] >> (offset & 0x7)

      z &= 1;
      z = #SHL(z, j);

      indices[i] ^= z;
      offset += 1;
    }
  }
  return indices;
}

/**
 * Signs a message m, deriving the secret key from sk_seed and the FTS address.
 * Assumes m contains at least SPX_FORS_HEIGHT * SPX_FORS_TREES bits.
 */
inline fn __fors_sign(
  reg ptr u8[SPX_FORS_BYTES] sig,
  reg ptr u8[SPX_FORS_PK_BYTES] pk,
  reg u64 m,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_FORS_BYTES], reg ptr u8[SPX_FORS_PK_BYTES]
{
  stack ptr u8[SPX_FORS_BYTES] s_sig;
  stack ptr u8[SPX_FORS_PK_BYTES] s_pk;
  stack ptr u32[8] s_fors_addr;
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u8[SPX_N] s_sk_seed;

  stack u64 s_m;

  /////////////////////////////////////////////////////////////////////////////

  stack u32[SPX_FORS_TREES] indices;
  stack u8[SPX_FORS_TREES * SPX_N] roots;
  stack u32[8] fors_tree_addr;
  stack u32[8] fors_leaf_addr;
  stack u32[8] fors_pk_addr;

  inline int i;

  reg u32 idx_offset; 
  stack u32 s_idx_offset;

  reg u32 t;
  stack u32 s_t;

  inline int sig_offset;
  sig_offset = 0;

  /////////////////////////////////////////////////////////////////////////////
  fors_tree_addr = __zero_array_u32<8>(fors_tree_addr);
  fors_leaf_addr = __zero_array_u32<8>(fors_leaf_addr); // struct fors_gen_leaf_info 
  fors_pk_addr   = __zero_array_u32<8>(fors_pk_addr);

  fors_tree_addr = __copy_keypair_addr(fors_tree_addr, fors_addr);
  fors_leaf_addr = __copy_keypair_addr(fors_leaf_addr, fors_addr);

  fors_pk_addr   = __copy_keypair_addr(fors_pk_addr, fors_addr);
  fors_pk_addr = __set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);

  indices = __message_to_indices(indices, m);

  s_sig = sig;
  for i = 0 to SPX_FORS_TREES {
    idx_offset = 1;
    idx_offset = #SHL_32(idx_offset, SPX_FORS_HEIGHT);
    idx_offset *= i;

    fors_tree_addr = __set_tree_height(fors_tree_addr, 0);

    t = indices[i]; 
    t += idx_offset; 
    fors_tree_addr = __set_tree_index(fors_tree_addr, t);

    fors_tree_addr = __set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSPRF);

    // spills before running fors gen sk
    s_idx_offset = idx_offset;
    s_pub_seed = pub_seed;
    s_sk_seed = sk_seed;
    
    sig = s_sig;
    sig[sig_offset:SPX_N] = __fors_gen_sk__(sig[sig_offset:SPX_N], pub_seed, sk_seed, fors_tree_addr);
    s_sig = sig;

    // Unspill after fors gen sk
    idx_offset = s_idx_offset;
    pub_seed = s_pub_seed;
    sk_seed = s_sk_seed;

    fors_tree_addr = __set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);
    sig_offset += SPX_N;

    // TODO: Call to treehash

    sig_offset += SPX_N * SPX_FORS_HEIGHT;
  }

  // Hash horizontally across all tree roots to derive the public key
  pk = __thash_<SPX_FORS_TREES>(pk, roots, pub_seed, fors_pk_addr);

  sig = s_sig;

  return sig, pk;
}

#[returnaddress="stack"]
fn _fors_sign(
  reg u64 sig,
  reg ptr u8[SPX_FORS_PK_BYTES] pk,
  reg u64 m,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg const ptr u32[8] fors_addr
) -> reg ptr u8[SPX_FORS_BYTES], reg ptr u8[SPX_FORS_PK_BYTES]
{
  sig, pk = __fors_sign(sig, pk, m, pub_seed, sk_seed, fors_addr);
  return sig, pk;
}

inline fn __fors_pk_from_sig(
  reg ptr u8[SPX_FORS_PK_BYTES] pk,
  reg ptr u8[SPX_FORS_BYTES] sig,
  reg u64 m,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_FORS_PK_BYTES]
{
  stack ptr u8[SPX_FORS_PK_BYTES] s_pk;
  stack ptr u8[SPX_N] s_pub_seed;

  /////////////////////////////////////////////////////////////////////////////

  stack u8[SPX_N] leaf;
  stack u32[SPX_FORS_TREES] indices;
  stack u8[SPX_FORS_TREES * SPX_N] roots;
  stack u32[8] fors_tree_addr;
  stack u32[8] fors_pk_addr;

  reg u32 idx_offset;
  stack u32 s_idx_offset;
  reg u32 t; // aux 

  inline int i;
  inline int sig_offset;

  sig_offset = 0;

  /////////////////////////////////////////////////////////////////////////////

  fors_tree_addr = __zero_array_u32<8>(fors_tree_addr);
  fors_pk_addr   = __zero_array_u32<8>(fors_pk_addr);

  fors_tree_addr = __set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);
  fors_pk_addr = __set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);

  indices = __message_to_indices(indices, m);

  s_pk = pk;
  s_pub_seed = pub_seed;

  for i=0 to SPX_FORS_TREES {
    idx_offset = 1;
    idx_offset = #SHL_32(idx_offset, SPX_FORS_HEIGHT);
    idx_offset *= i;

    fors_tree_addr = __set_tree_height(fors_tree_addr, 0);

    t = indices[i]; 
    t += idx_offset; 
    fors_tree_addr = __set_tree_index(fors_tree_addr, t);

    s_idx_offset = idx_offset;
    
    pub_seed = s_pub_seed;
    // leaf = __fors_sk_to_leaf__(leaf, sig[sig_offset:SPX_N], pub_seed, fors_tree_addr);
    sig_offset += SPX_N;
  }

  pk = s_pk;
  pub_seed = s_pub_seed;

  // Hash horizontally across all tree roots to derive the public key
  pk = __thash_<SPX_FORS_TREES>(pk, roots, pub_seed, fors_pk_addr);
  return pk;
}

#[returnaddress="stack"]
fn _fors_pk_from_sig(
  reg ptr u8[SPX_FORS_PK_BYTES] pk,
  reg u64 sig,
  reg u64 m,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_FORS_PK_BYTES]
{
  pk = __fors_pk_from_sig(pk, sig, m, pub_seed, sk_seed, fors_addr);
  return pk;
}
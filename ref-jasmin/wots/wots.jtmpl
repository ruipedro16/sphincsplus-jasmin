from Sphincs require "address/address.jinc"
from Sphincs require "memcpy/memcpy.jtmpl"
from Sphincs require "generic/conditions.jinc"
from Sphincs require "generic/utils.jtmpl"

param int SPX_WOTS_BYTES  = SPX_WOTS_LEN * SPX_N; // TODO: Set this in another file

inline fn __gen_chain(
  reg ptr u8[SPX_N] out,
  reg u64 in,
  reg u32 start,
  reg u32 steps,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N], 
     reg ptr u32[8]
{
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u32[8] s_addr;

  reg bool cond;
  reg u32 i t;
  stack u32 s_i s_t;

  // memcpy(out, in, SPX_N);
  out, _ = _x_memcpy_u8u8p<SPX_N>(out, 0, in, SPX_N);

  s_pub_seed = pub_seed;
  s_addr = addr;

  i = start;
  t = start;
  t += steps; // From now on, start & steps are no longer live
  // for (i = start; i < (start+steps) && i < SPX_WOTS_W; i++)
  while {
    // i < (start+steps) && i < SPX_WOTS_W
    cond = __cond_u32_a_below_b_and_a_below_c(i, t, SPX_WOTS_W);
  } (cond)
  {
    s_i = i;
    s_t = t;

    // set_hash_addr(addr, i);
    s_addr = addr;
    addr = __set_hash_addr(addr, i);
    s_addr = addr;

    // thash(out, out, 1, ctx, addr);
    pub_seed = s_pub_seed;
    out = __thash_inplace(out, pub_seed, addr);

    i = s_i;
    t = s_t;
    i += 1;
  }

  addr = s_addr;

  return out, addr;
}//<>

#[returnaddress="stack"]
fn _gen_chain(
  reg ptr u8[SPX_N] out,
  reg u64 in,
  reg u32 start,
  reg u32 steps,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  out, addr = __gen_chain(out, in, start, steps, pub_seed, addr);
  return out, addr;
}//<>

inline fn __gen_chain_(
  reg ptr u8[SPX_N] out,
  reg u64 in,
  reg u32 start,
  reg u32 steps,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N], reg ptr u32[8]
{
  stack ptr u8[SPX_N] s_out;
  stack u64 s_in;
  stack u32 s_start;
  stack u32 s_steps;
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u32[8] s_addr;

  // Allow for full register swap
  s_out = out; s_in = in; s_start = start; s_steps = steps; s_pub_seed = pub_seed; s_addr = addr;

  out = s_out; in = s_in; start = s_start; steps = s_steps; pub_seed = s_pub_seed; addr = s_addr;

  out, addr = _gen_chain(out, in, start, steps, pub_seed, addr);

  return out, addr;
}//<>

inline fn __base_w<OUTLEN,INLEN>(
  reg ptr u32[OUTLEN] output,
  reg ptr u8[INLEN] input
) -> reg ptr u32[OUTLEN]
{
  reg u64 in out;
  reg u8 total;
  reg u8 t u;
  reg u32 z;
  reg u64 bits consumed;

  reg u64 x64;

  in   = 0;
  out  = 0;
  bits = 0;
  consumed = 0;
  while (consumed < OUTLEN)
  {
    if (bits == 0) 
    {
      total = input[(int) in];
      in += 1;
      bits += 8;
    }
    bits -= SPX_WOTS_LOGW;
    
    u = total;
    // TODO: FIXME: x64 shouldnt be needed
    x64 = (64u) u; // TODO: FIXME: x64 shouldnt be needed
    x64 >>= (bits & 63); // TODO: FIXME: x64 shouldnt be needed
    u = (8u) x64; // TODO: FIXME: x64 shouldnt be needed
    // TODO: FIXME: x64 shouldnt be needed
    t = SPX_WOTS_W;
    t -= 1;
    u &= t;
    z = (32u) u;
    output[(int) out] = z;

    out += 1;
    consumed += 1;
  }

  return output;
}//<> 

inline fn __wots_checksum(
  reg ptr u32[SPX_WOTS_LEN2] csum_base_w,
  reg ptr u32[SPX_WOTS_LEN] msg_base_w
) -> reg ptr u32[SPX_WOTS_LEN2]
{
  stack u8[(SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8] csum_bytes;
  inline int i;
  reg u64 csum t u;
  stack u64 s_t;

  inline int k;
  stack u64 eight; // FIXME:

  csum = 0;
  eight = 8;


  for i = 0 to SPX_WOTS_LEN1 
  {
    t = SPX_WOTS_W;
    t -= 1;
    u = (64u) msg_base_w[i];
    t -= u;
    csum += t;
  }

  k = (SPX_WOTS_LEN2 * SPX_WOTS_LOGW) % 8;

  u = 8;
  u -= k;
  u %= eight; // FIXME: 

  u = u;
  ?{}, csum = #SHL(csum, u);

  csum_bytes = __ull_to_bytes_t<(SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8>(csum_bytes, csum);

  csum_base_w = __base_w<SPX_WOTS_LEN2, (SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8>(csum_base_w, csum_bytes);

  return csum_base_w;
}

/* Takes a message and derives the matching chain lengths. */
inline fn __chain_lengths(
  reg ptr u32[SPX_WOTS_LEN] lengths,
  reg ptr u8[SPX_N] msg
) -> reg ptr u32[SPX_WOTS_LEN]
{
  reg ptr u32[SPX_WOTS_LEN2] t;
  
  lengths = __base_w<SPX_WOTS_LEN,SPX_N>(lengths, msg);

  t = lengths[SPX_WOTS_LEN1 : SPX_WOTS_LEN2];
  t = __wots_checksum(t, lengths);

  lengths[SPX_WOTS_LEN1 : SPX_WOTS_LEN2] = t;

  return lengths;
}

#[returnaddress="stack"]
fn _chain_lengths(
  reg ptr u32[SPX_WOTS_LEN] lengths,
  reg ptr u8[SPX_N] msg
) -> reg ptr u32[SPX_WOTS_LEN]
{
  lengths = __chain_lengths(lengths, msg);
  return lengths;
}//<>

inline fn __chain_lengths__(
  reg ptr u32[SPX_WOTS_LEN] lengths,
  reg ptr u8[SPX_N] msg
) -> reg ptr u32[SPX_WOTS_LEN]
{
  lengths = lengths; msg = msg;
  lengths = _chain_lengths(lengths, msg);
  lengths = lengths;
  return lengths;
}//<>

// NOTE: Removed the MSG_LEN parameter because the length of the message is always SPX_N
inline fn __wots_pk_from_sig(
    reg ptr u8[SPX_WOTS_BYTES] pk,
    reg u64 sig,
    reg ptr u8[SPX_N] msg,
    reg ptr u8[SPX_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[SPX_WOTS_BYTES], 
     reg ptr u32[8]
{
  //////
  stack ptr u8[SPX_WOTS_BYTES] s_pk;
  stack u64 s_sig;
  stack ptr u8[SPX_N] s_pub_seed;
  stack ptr u32[8] s_addr;
  //////

  stack u32[SPX_WOTS_LEN] lengths;
  
  reg ptr u8[SPX_N] out;
  
  inline int i;
  //
  // NOTE: i tem de ser um inline int em vez de um reg u64 pq, se usar um reg u64 dÃ¡ este erro
  // stack allocation: cannot compile sub-array pk.5732 that has a non-constant start index
  //
  // ====> O ciclo tem de ser um for em vez de um while ?

  reg u32 start steps;

  //// Spill everything to the stack at the beginning
  s_pk = pk;
  s_sig = sig;
  s_pub_seed = pub_seed;
  s_addr = addr;

  // chain_lengths(lengths, msg);
  lengths = __chain_lengths(lengths, msg);

  for i=0 to SPX_WOTS_LEN
  {
    // set_chain_addr(addr, i);
    addr = s_addr;
    addr = __set_chain_addr(addr, i);
    s_addr = addr;

    // gen_chain(pk + i*SPX_N, 
    //           sig + i*SPX_N, 
    //           lengths[i], == start
    //           SPX_WOTS_W - 1 - lengths[i], == steps
    //           ctx, == pub_seed
    //           addr);

    pk = s_pk;
    out = pk[i * SPX_N : SPX_N];

    sig = s_sig;
    sig += i*SPX_N;
    
    start = lengths[i];
    
    steps = SPX_WOTS_W;
    steps -= 1;
    steps -= lengths[i];

    pub_seed = s_pub_seed;
    addr = s_addr;

    s_pk[i * SPX_N : SPX_N], addr = __gen_chain(out, sig, start, steps, pub_seed, addr);

    s_addr = addr;
  }

  pk = s_pk;
  addr = s_addr;

  return pk, addr;
}

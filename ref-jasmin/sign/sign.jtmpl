from Sphincs require "hash/hash_shake.jtmpl"
from Sphincs require "fors/fors.jtmpl"
from Sphincs require "memcmp/memcmp.jtmpl"
from Sphincs require "memset/memset.jinc"
from Sphincs require "merkle/merkle.jtmpl"

//////////////////////// SIGN SEED KEYPAIR
#[returnaddress="stack"]
fn _crypto_sign_seed_keypair(
  reg ptr u8[SPX_PK_BYTES] pk,
  reg ptr u8[SPX_SK_BYTES] sk,
  reg ptr u8[CRYPTO_SEEDBYTES] seed
) -> reg ptr u8[SPX_PK_BYTES],
     reg ptr u8[SPX_SK_BYTES]
{
  stack u8[SPX_N] pub_seed;
  stack u8[SPX_N] sk_seed;

  reg ptr u8[SPX_N] pub_seed_p;
  reg ptr u8[SPX_N] sk_seed_p;

  reg ptr u8[SPX_N] root;
  reg ptr u8[SPX_N] buf;
  reg u64 offset;

  // memcpy(sk, seed, CRYPTO_SEEDBYTES);
  offset = 0;
  sk, _ = _x_memcpy_u8u8<SPX_SK_BYTES, CRYPTO_SEEDBYTES>(sk, offset, seed);

  // memcpy(pk, sk + 2 * SPX_N, SPX_N);
  offset = 0;
  buf = sk[2 * SPX_N : SPX_N];
  pk, _ = _x_memcpy_u8u8<SPX_PK_BYTES, SPX_N>(pk, offset, buf);

  // memcpy(ctx.pub_seed, pk, SPX_N);
  pub_seed_p = pub_seed;
  offset = 0;
  buf = pk[0 : SPX_N];
  pub_seed, _ = _x_memcpy_u8u8<SPX_N, SPX_N>(pub_seed_p, offset, buf);

  // memcpy(ctx.sk_seed, sk, SPX_N);
  sk_seed_p = sk_seed;
  offset = 0;
  buf = sk[0 : SPX_N];
  sk_seed, _ = _x_memcpy_u8u8<SPX_N, SPX_N>(sk_seed_p, offset, buf);

  () = #spill(pk);

  // merkle_gen_root(sk + 3 * SPX_N, &ctx);
  root = sk[3*SPX_N : SPX_N];
  pub_seed_p = pub_seed;
  sk_seed_p = sk_seed;
  sk[3*SPX_N : SPX_N] = _merkle_gen_root(root, pub_seed_p, sk_seed_p);

  () = #unspill(pk);

  // memcpy(pk + SPX_N, sk + 3 * SPX_N, SPX_N);  
  offset = SPX_N;
  buf = sk[3*SPX_N : SPX_N];
  pk, _ = _x_memcpy_u8u8<SPX_PK_BYTES, SPX_N>(pk, offset, buf);

  return pk, sk;
}

inline fn __crypto_sign_seed_keypair(reg u64 _pk _sk _seed) -> reg u64
{
  reg u64 r;

  stack u8[SPX_PK_BYTES] pk;
  reg ptr u8[SPX_PK_BYTES] pk_p;

  stack u8[SPX_SK_BYTES] sk;
  reg ptr u8[SPX_SK_BYTES] sk_p;

  stack u8[CRYPTO_SEEDBYTES] seed;
  reg ptr u8[CRYPTO_SEEDBYTES] seed_p;

  reg u64 offset inlen;

  () = #spill(_pk, _sk);

  // load seed
  seed_p = seed;
  offset = 0;
  inlen = CRYPTO_SEEDBYTES;
  seed_p, _ = _x_memcpy_u8u8p<CRYPTO_SEEDBYTES>(seed_p, offset, _seed, inlen);

  pk_p = pk;
  sk_p = sk;

  pk_p, sk_p = _crypto_sign_seed_keypair(pk_p, sk_p, seed_p);

  () = #unspill(_pk, _sk);

  __store_u8_array<SPX_PK_BYTES>(pk_p, _pk);
  __store_u8_array<SPX_SK_BYTES>(sk_p, _sk);

  ?{}, r = #set0();
  return r;
}

//////////////////////// SIGN KEYPAIR
inline fn __crypto_sign_keypair(reg u64 _pk _sk) -> reg u64
{
  reg u64 r;

  stack u8[SPX_PK_BYTES] pk;
  reg ptr u8[SPX_PK_BYTES] pk_p;

  stack u8[SPX_SK_BYTES] sk;
  reg ptr u8[SPX_SK_BYTES] sk_p;

  stack u8[CRYPTO_SEEDBYTES] seed;
  reg ptr u8[CRYPTO_SEEDBYTES] seed_p;

  stack u64 s_pk s_sk;

  () = #spill(_pk, _sk);

  seed_p = seed;
  seed_p = #randombytes(seed_p);

  pk_p = pk;
  sk_p = sk;
  pk_p, sk_p = _crypto_sign_seed_keypair(pk_p, sk_p, seed_p);

  () = #unspill(_pk, _sk);

  __store_u8_array<SPX_PK_BYTES>(pk_p, _pk);
  __store_u8_array<SPX_SK_BYTES>(sk_p, _sk);

  ?{}, r = #set0();
  return r;
}

//////////////////////// SIGN SIGNATURE

inline fn __crypto_sign_signature(
  reg u64 sig,
  reg u64 msg,
  reg u64 msg_len,
  reg ptr u8[SPX_SK_BYTES] sk
)
{
  ////////////////////////////
  // NOTE:
  // Format sk: [SK_SEED || SK_PRF || PUB_SEED || root]
  // 
  ////////////////////////////

  /////// Variables for spills
  stack u64 s_sig;
  stack ptr u8[SPX_SK_BYTES] s_sk;
  ///////

  stack u8[SPX_N] pub_seed;
  stack u8[SPX_N] sk_seed;
  stack u8[SPX_N] optrand;
  stack u8[SPX_N] randomness;
  stack u8[SPX_FORS_MSG_BYTES] mhash;
  stack u8[SPX_N] root;
  stack u32[8] wots_addr;
  stack u32[8] tree_addr;

  reg ptr u8[SPX_PK_BYTES] pk;
  stack ptr u8[SPX_PK_BYTES] s_pk;

  reg ptr u8[SPX_N] sk_prf;
  stack ptr u8[SPX_N] s_sk_prf;

  reg u32 idx_leaf; 

  reg u64 tree; 

  reg u64 offset;
  reg u32 type;

  reg ptr u8[SPX_N] buf;

  reg u32 i;

  inline int k;
  reg u64 t;

  stack u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] auth_path_p;

  inline int u;

  ///////////// initial spills
  s_sig = sig;
  () = #spill(msg, msg_len);
  ///////////////////////////////////////

  // const unsigned char *sk_prf = sk + SPX_N;
  sk_prf = sk[SPX_N : SPX_N];

  // const unsigned char *pk = sk + 2 * SPX_N;
  pk = sk[2*SPX_N : SPX_PK_BYTES];  

  () = #spill(sk_prf, pk);

   // uint32_t wots_addr[8] = {0};
  wots_addr = __zero_array_u32<8>(wots_addr);

  // uint32_t tree_addr[8] = {0};
  tree_addr = __zero_array_u32<8>(tree_addr);

  // memcpy(ctx.sk_seed, sk, SPX_N);
  offset = 0;
  sk_seed, _ = _x_memcpy_u8u8<SPX_N, SPX_N>(sk_seed, offset, sk[0:SPX_N]);

  // memcpy(ctx.pub_seed, pk, SPX_N);
  pub_seed, _ = _x_memcpy_u8u8<SPX_N, SPX_PK_BYTES>(pub_seed, offset, pk);

  // set_type(wots_addr, SPX_ADDR_TYPE_WOTS);
  // set_type(tree_addr, SPX_ADDR_TYPE_HASHTREE);

  wots_addr = __set_type(wots_addr, SPX_ADDR_TYPE_WOTS);
  tree_addr = __set_type(tree_addr, SPX_ADDR_TYPE_HASHTREE);

  // randombytes(optrand, SPX_N);
  optrand = #randombytes(optrand);

  // gen_message_random(sig, sk_prf, optrand, m, mlen, &ctx);
  () = #unspill(sk_prf, msg, msg_len);
  randomness = __gen_message_random(randomness, sk_prf, optrand, msg, msg_len);
  
  // Copy the first SPX_N bytes of the randomness to the signature
  sig = s_sig;
  offset = 0;
  _, _ = _x_memcpy_u8pu8<SPX_N>(sig, offset, randomness);

  // hash_message(mhash, &tree, &idx_leaf, sig, pk, m, mlen, &ctx);
  //                                        || 
  //                                        \/
  //                         Here, the 1st SPX_N bytes of sig
  //                         are the randomness bytes
  () = #unspill(pk, msg, msg_len);
  mhash, tree, idx_leaf = _hash_message(mhash, randomness, pk, msg, msg_len);
  () = #spill(tree, idx_leaf);

  // sig += SPX_N;
  s_sig += SPX_N;

  // set_tree_addr(wots_addr, tree);
  // set_keypair_addr(wots_addr, idx_leaf);

  wots_addr = __set_tree_addr(wots_addr, tree);
  wots_addr = __set_keypair_addr(wots_addr, idx_leaf);

  // fors_sign(sig, root, mhash, &ctx, wots_addr);
  sig = s_sig;
  root = _fors_sign(sig, root, mhash, pub_seed, sk_seed, wots_addr);

  // sig += SPX_FORS_BYTES;
  s_sig += SPX_FORS_BYTES;

  i = 0;
  while (i < SPX_D)
  {
    () = #spill(i);

    // set_layer_addr(tree_addr, i);
    tree_addr = __set_layer_addr(tree_addr, i);

    // set_tree_addr(tree_addr, tree);
    () = #unspill(tree);
    tree_addr = __set_tree_addr(tree_addr, tree);

    // copy_subtree_addr(wots_addr, tree_addr);
    wots_addr = __copy_subtree_addr(wots_addr, tree_addr);

    // set_keypair_addr(wots_addr, idx_leaf);
    () = #unspill(idx_leaf);
    wots_addr = __set_keypair_addr(wots_addr, idx_leaf);
    
    // merkle_sign(sig, root, &ctx, wots_addr, tree_addr, idx_leaf);
    sig = s_sig;
    auth_path = __load_u8_array<SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES>(auth_path, sig);
    () = #unspill(idx_leaf);
    auth_path, root, tree_addr = _merkle_sign(auth_path, root, pub_seed, sk_seed, wots_addr, tree_addr, idx_leaf);
    sig = s_sig; 
    __store_u8_array<SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES>(auth_path, sig);

    // sig += SPX_WOTS_BYTES + SPX_TREE_HEIGHT * SPX_N;
    s_sig += SPX_WOTS_BYTES + SPX_TREE_HEIGHT * SPX_N;

    // idx_leaf = (tree & ((1 << SPX_TREE_HEIGHT) - 1));
    () = #unspill(idx_leaf, tree);

    k = (1 << SPX_TREE_HEIGHT) - 1;
    idx_leaf = tree;
    idx_leaf &= k;
    () = #spill(idx_leaf);

    // tree = tree >> SPX_TREE_HEIGHT;
    ?{}, tree = #SHR(tree, SPX_TREE_HEIGHT);
    () = #spill(tree);

    () = #unspill(i);
    i += 1;
  } // end while i < SPX_D
} 

#[returnaddress="stack"]
fn _crypto_sign_signature(
  reg u64 sig,
  reg u64 msg,
  reg u64 msg_len,
  reg ptr u8[SPX_SK_BYTES] sk
)
{ __crypto_sign_signature(sig, msg, msg_len, sk); }

inline fn ___crypto_sign_signature_(reg u64 sig _sig_len m mlen _sk) -> reg u64
{
  reg u64 r;

  stack u8[SPX_SK_BYTES] sk;
  reg ptr u8[SPX_SK_BYTES] sk_p;

  reg u64 offset inlen;

  sk_p = sk;
  offset = 0;
  inlen = SPX_SK_BYTES;
  sk_p, _  = _x_memcpy_u8u8p<SPX_SK_BYTES>(sk_p, offset, _sk, inlen);

  () = #spill(_sig_len);

  _crypto_sign_signature(sig, m, mlen, sk_p);
  sk = sk_p;

  () = #unspill(_sig_len);

  [_sig_len] = SPX_BYTES;

  ?{}, r = #set0();
  return r;
}

//////////////////////// SIGN VERIFY

// return -1 se root e pub_root nao forem iguais
// return 0 caso contrario
inline fn __crypto_sign_verify(
  reg u64 sig,
  reg u64 msg,
  reg u64 msg_len,
  reg ptr u8[SPX_PK_BYTES] pk
) -> reg u64
{
  stack u32[8] wots_addr;
  stack u32[8] tree_addr;
  stack u32[8] wots_pk_addr;
  stack u8[SPX_WOTS_BYTES] wots_pk;
  stack u8[SPX_N] pub_seed;
  stack u8[SPX_FORS_MSG_BYTES] mhash;
  stack u8[SPX_N] randomness;
  stack u8[SPX_N] root;
  stack u8[SPX_N] leaf;

  reg u32 idx_leaf;
  reg u64 offset tree;

  stack u64 s_sig s_tree s_msg s_msg_len;
  stack u32 s_idx_leaf;

  reg u64 res;
  stack u64 s_res;
  
  inline int i;
  inline u32 k;

  s_sig = sig; // TODO: FIXME: Replace with spill
  s_msg = msg;
  s_msg_len = msg_len;

  () = #spill(pk);

  // uint32_t wots_addr[8] = {0};
  wots_addr = __zero_array_u32<8>(wots_addr);

  // uint32_t tree_addr[8] = {0};
  tree_addr = __zero_array_u32<8>(tree_addr);

  // uint32_t wots_pk_addr[8] = {0};
  wots_pk_addr = __zero_array_u32<8>(wots_pk_addr);

  // memcpy(ctx.pub_seed, pk, SPX_N);
  offset = 0;
  pub_seed, _ = _x_memcpy_u8u8<SPX_N, SPX_N>(pub_seed, offset, pk[0:SPX_N]);

  // set_type(wots_addr, SPX_ADDR_TYPE_WOTS);
  // set_type(tree_addr, SPX_ADDR_TYPE_HASHTREE);
  // set_type(wots_pk_addr, SPX_ADDR_TYPE_WOTSPK);
  wots_addr = __set_type(wots_addr, SPX_ADDR_TYPE_WOTS);
  tree_addr = __set_type(tree_addr, SPX_ADDR_TYPE_HASHTREE);
  wots_pk_addr = __set_type(wots_pk_addr, SPX_ADDR_TYPE_WOTSPK);

  // hash_message(mhash, &tree, &idx_leaf, sig, pk, m, mlen, &ctx);
  sig = s_sig;
  randomness = __load_u8_array<SPX_N>(randomness, sig);
  mhash, tree, idx_leaf = _hash_message(mhash, randomness, pk, msg, msg_len);
  s_tree = tree;        
  s_idx_leaf = idx_leaf;
  
  // sig += SPX_N;
  s_sig += SPX_N;

  // set_tree_addr(wots_addr, tree);
  // set_keypair_addr(wots_addr, idx_leaf);
  wots_addr = __set_tree_addr(wots_addr, tree);
  wots_addr = __set_keypair_addr(wots_addr, idx_leaf);

  // fors_pk_from_sig(root, sig, mhash, &ctx, wots_addr);
  sig = s_sig;
  root = _fors_pk_from_sig(root, sig, mhash, pub_seed, wots_addr);

  // sig += SPX_FORS_BYTES;
  s_sig += SPX_FORS_BYTES;

  for i=0 to SPX_D {
    // Invariante: tree e idx_leaf nao estao live (tem de se fazer unspill)
    //             sig tambem nao esta live (esta na stack)
    //             tudo o resto sao stack arrays por isso e irrelevante
    // set_layer_addr(tree_addr, i);
    // set_tree_addr(tree_addr, tree);
    // copy_subtree_addr(wots_addr, tree_addr);
    // set_keypair_addr(wots_addr, idx_leaf);
    // copy_keypair_addr(wots_pk_addr, wots_addr); 
    tree = s_tree;        
    idx_leaf = s_idx_leaf;
    tree_addr = __set_layer_addr(tree_addr, i);
    tree_addr = __set_tree_addr(tree_addr, tree);
    wots_addr = __copy_subtree_addr(wots_addr, tree_addr);
    wots_addr = __set_keypair_addr(wots_addr, idx_leaf);
    wots_pk_addr = __copy_keypair_addr(wots_pk_addr, wots_addr); 

    // wots_pk_from_sig(wots_pk, sig, root, &ctx, wots_addr);
    sig = s_sig;
    wots_pk, wots_addr = _wots_pk_from_sig(wots_pk, sig, root, pub_seed, wots_addr);

    // sig += SPX_WOTS_BYTES;
    s_sig += SPX_WOTS_BYTES;

    // thash(leaf, wots_pk, SPX_WOTS_LEN, &ctx, wots_pk_addr);
    leaf = _thash<SPX_WOTS_LEN>(leaf, wots_pk, pub_seed, wots_pk_addr);

    // compute_root(root, leaf, idx_leaf, 0, sig, SPX_TREE_HEIGHT, &ctx, tree_addr);
    sig = s_sig;
    idx_leaf = s_idx_leaf;
    root, tree_addr = __compute_root(root, leaf, idx_leaf, 0, sig, SPX_TREE_HEIGHT, pub_seed, tree_addr);

    // sig += SPX_TREE_HEIGHT * SPX_N;
    s_sig += SPX_TREE_HEIGHT * SPX_N;

     // idx_leaf = (tree & ((1 << SPX_TREE_HEIGHT) - 1));
    k = (1 << SPX_TREE_HEIGHT) - 1;
    tree = s_tree;
    idx_leaf = tree;
    idx_leaf &= k;
    
    // tree = tree >> SPX_TREE_HEIGHT;
    ?{}, tree = #SHR(tree, SPX_TREE_HEIGHT);
    
    // Spill
    s_idx_leaf = idx_leaf;
    s_tree = tree;
  }

  () = #unspill(pk);
  res = __memcmp<SPX_N>(root, pk[SPX_N:SPX_N], res);

  return res;
}

fn _crypto_sign_verify(
  reg u64 sig,
  reg u64 msg,
  reg u64 msg_len,
  reg ptr u8[SPX_PK_BYTES] pk
) -> reg u64
{
  reg u64 res;
  res = __crypto_sign_verify(sig, msg, msg_len, pk);
  return res;
}

inline fn __crypto_sign_verify_(
  reg u64 sig,
  reg u64 sig_len,
  reg u64 m,
  reg u64 m_len,
  reg u64 _pk // Address to load the pk
) -> reg u64
{
  reg u64 r;
  
  stack u8[SPX_PK_BYTES] pk;
  reg ptr u8[SPX_PK_BYTES] pk_p;

  reg u64 offset inlen;

  if (sig_len != SPX_BYTES) { r = -1; } 
  else {
    // We dont need sig len because when we get here we already know that sig_len is SPX_BYTES
    pk_p = pk;
    offset = 0;
    inlen = SPX_PK_BYTES;
    pk_p, _  = _x_memcpy_u8u8p<SPX_PK_BYTES>(pk_p, offset, _pk, inlen);

    r = _crypto_sign_verify(sig, m, m_len, pk_p);
  }

  return r;
}

inline fn __crypto_sign(reg u64 sm _smlen m mlen _sk) -> reg u64
{
  reg u64 r;
  reg u64 sig_len t;
  reg u8 v;
  reg u64 i;

  _smlen = _smlen;

  () = #spill(sm, m, mlen, _smlen);

  _ = ___crypto_sign_signature_(sm, _smlen, m, mlen, _sk);


  () = #unspill(sm, m, mlen, _smlen);

  // memmove(sm + SPX_BYTES, m, mlen);
  i=0;
  while (i < mlen)
  {
    v = (u8)[m + i];
    (u8)[sm + SPX_BYTES] = v;
    i += 1;
  }

  // *smlen = siglen + mlen;
  t = SPX_BYTES;
  t += mlen;
  (u64)[_smlen] = t;
  ?{}, r = #set0();
  return r;
}

inline fn __crypto_sign_open(reg u64 msg msg_len sm sm_len _pk) -> reg u64 
{
  reg u64 r;
  stack u8[SPX_PK_BYTES] pk;
  reg ptr u8[SPX_PK_BYTES] pk_p;

  reg u64 len l;
  reg u64 i;
  reg u8 val;

  stack u64 sm_entry; // sm at the entrypoint of the program
  stack u64 s_msg s_sm s_sm_len s_msg_len; // spill

  // if (smlen < SPX_BYTES) { memset(m, 0, smlen); *mlen = 0; return -1; }
  if (sm_len < SPX_BYTES)
  {
    // memset(m, 0, smlen);
    __memset(msg, 0, sm_len);

    // *mlen = 0;
    (u64)[msg_len] = 0;
    
    // return -1;
    r = -1;
  } else {
    sm_entry = sm;
    s_sm_len = sm_len; // spill
    s_msg_len = msg_len; // spill
    s_msg = msg; // spill

    pk_p = pk;
    pk_p = __load_u8_array<SPX_PK_BYTES>(pk_p, _pk);  

    // *mlen = smlen - SPX_BYTES;
    len = sm_len;
    len -= SPX_BYTES;
    (u64)[msg_len] = len;
    
    // if (crypto_sign_verify(sm, SPX_BYTES, sm + SPX_BYTES, (size_t)*mlen, pk))
    //     memset(m, 0, smlen); *mlen = 0; return -1;
    len = SPX_BYTES;
    sm += SPX_BYTES;
    () = #spill(sm);
    l = (u64)[msg_len];

    // NOTE: The 2nd argument in ref is not here because at this point the length of the signature is always SPX_BYTES
    r = __crypto_sign_verify(sm_entry, sm, l, pk_p);

    msg = s_msg; // unspill
    msg_len = s_msg_len; // unspill
    
    if (r != 0) 
    {
      val = 0;
      sm_len = s_sm_len;   // unspill
      __memset(msg, val, sm_len);
      (u64)[msg_len] = 0;
      r = -1;
    }

    // memmove(m, sm + SPX_BYTES, *mlen);
    () = #unspill(sm);
    len = (u64)[msg_len];
    ?{}, i = #set0();
    while (i < len)
    {
      val = (u8)[sm + i]; // at this point sm was already updated with  + SPX_BYTES
      (u8)[msg + i] = val;
      i += 1;
    }
  }

  return r;
}
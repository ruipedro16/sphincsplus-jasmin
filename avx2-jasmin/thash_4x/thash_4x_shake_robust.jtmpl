from Sphincs require "fips202x4/fips202_4x.jtmpl"
from Sphincs require "memcpy/memcpy.jtmpl";
from Sphincs require "avx2_utils/utils.jinc"

// FIXME: se tentar colocar isto num stack u64 falha com "asmgen: instruction MOV_64 is given at least one too large immediate as an argument."
u64 T = (8u8) [0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]; // Same as 0x80ULL << 56

inline fn __thash<INBLOCKS>(
  reg ptr u8[SPX_N] out0,
  reg ptr u8[SPX_N] out1,
  reg ptr u8[SPX_N] out2,
  reg ptr u8[SPX_N] out3,
  reg ptr u8[INBLOCKS*SPX_N] in0,
  reg ptr u8[INBLOCKS*SPX_N] in1,
  reg ptr u8[INBLOCKS*SPX_N] in2,
  reg ptr u8[INBLOCKS*SPX_N] in3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[4*8] addrx4
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
    // if
    stack u256[25] state state2;
    reg u256 t u;
    reg u128 r0;
    inline int i;
    reg u8 t8;
    reg u64 offset_in offset_out;

    stack u64 zero; zero = 0;
    stack u64 val;

    //else
    stack u8[SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N] buf0 buf1 buf2 buf3;
    stack u8[INBLOCKS*SPX_N] bitmask0 bitmask1 bitmask2 bitmask3;

    () = #spill(out0, out1, out2, out3);

    if (INBLOCKS == 1 || INBLOCKS == 2) { // statically resolved if
        // for (int i = 0; i < SPX_N/8; i++) { state[i] = _mm256_set1_epi64x(((int64_t*)ctx->pub_seed)[i]); }
        for i=0 to SPX_N / 8 { t = #VPBROADCAST_4u64(pub_seed[u64 i]); state[i] = t; } 

        // for (int i = 0; i < 4; i++) { state[SPX_N/8+i] = _mm256_set_epi32(addrx4[3*8+1+2*i], addrx4[3*8+2*i], addrx4[2*8+1+2*i], addrx4[2*8+2*i], addrx4[8+1+2*i], addrx4[8+2*i], addrx4[1+2*i], addrx4[2*i]); }
        for i=0 to 4 {
            t = _mm256_set_epi32(addrx4[3*8+1+2*i], addrx4[3*8+2*i], addrx4[2*8+1+2*i], addrx4[2*8+2*i], addrx4[8+1+2*i], addrx4[8+2*i], addrx4[1+2*i], addrx4[2*i]);
            state[SPX_N/8 + i] = t;
        } 

        // state[SPX_N/8+4] = _mm256_set1_epi64x(0x1f);
        val = 0x1F;
        t = #VPBROADCAST_4u64(val);
        state[SPX_N/8+4] = t;

        // for (int i = SPX_N/8+5; i < 16; i++) { state[i] = _mm256_set1_epi64x(0); }
        for i=SPX_N/8+5 to 16 { t = #VPBROADCAST_4u64(zero); state[i] = t; }

        // state[16] = _mm256_set1_epi64x((long long)(0x80ULL << 56));
        t = #VPBROADCAST_4u64(T);
        state[16] = t;

        // for (int i = 17; i < 25; i++) { state[i] = _mm256_set1_epi64x(0); }
        for i=17 to 25 { t = #VPBROADCAST_4u64(zero); state[i] = t; }

        // memcpy(state2, state, 800);
        // 800 bytes is the same as 25 u256's
        for i=0 to 25 { t = state[i]; state2[i] = t; }

        // KeccakP1600times4_PermuteAll_24rounds(&state[0]);
        state = _KeccakF1600_StatePermute4x(state);

        // for (unsigned int i = 0; i < (SPX_N/8) * inblocks; i++) { state2[SPX_N/8+4+i] = _mm256_xor_si256(state[i], _mm256_set_epi64x(((int64_t*)in3)[i], ((int64_t*)in2)[i], ((int64_t*)in1)[i], ((int64_t*)in0)[i])); }
        for i=0 to (SPX_N/8) * INBLOCKS {
            t = _mm256_set_epi64x(in3[u64 i], in2[u64 i], in1[u64 i], in0[u64 i]);
            u = state[i];
            u = #VPXOR_256(u, t);
            state2[SPX_N/8+4+i] = u;
        }

        // state2[(SPX_N/8)*(1+inblocks)+4] = _mm256_xor_si256(state2[(SPX_N/8)*(1+inblocks)+4], _mm256_set1_epi64x(0x1f));
        val = 0x1F;
        u = #VPBROADCAST_4u64(val);
        t = state2[(SPX_N/8)*(1+INBLOCKS)+4];
        t = #VPXOR_256(t, u);
        state2[(SPX_N/8)*(1+INBLOCKS)+4] = t;

        // KeccakP1600times4_PermuteAll_24rounds(&state2[0]);
        state2 = _KeccakF1600_StatePermute4x(state2);

        () = #unspill(out0, out1, out2, out3);

        for i=0 to SPX_N / 8 {
            t = state2[i];
            r0 = #VEXTRACTI128(t, 1);
            out0[u64 i] = #VPEXTR_64(t, 0);
            out1[u64 i] = #VPEXTR_64(t, 1);
            // out2[u64 i] = #VPEXTR_64(t, 2); // TODO: Why doesnt this work? 
            // out3[u64 i] = #VPEXTR_64(t, 3); // TODO: Why doesnt this work?
            out2[u64 i] = #VPEXTR_64(r0, 0);
            out3[u64 i] = #VPEXTR_64(r0, 1);
        }
    } else {
        () = #spill(in0, in1, in2, in3);

        // memcpy(buf0, ctx->pub_seed, SPX_N);
        // memcpy(buf1, ctx->pub_seed, SPX_N);
        // memcpy(buf2, ctx->pub_seed, SPX_N);
        // memcpy(buf3, ctx->pub_seed, SPX_N);
        offset_out = 0;
        buf0, _ = _x_memcpy_u8u8<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_N>(buf0, offset_out, pub_seed);

        offset_out = 0;
        buf1, _ = _x_memcpy_u8u8<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_N>(buf1, offset_out, pub_seed);

        offset_out = 0;
        buf2, _ = _x_memcpy_u8u8<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_N>(buf2, offset_out, pub_seed);

        offset_out = 0;
        buf3, _ = _x_memcpy_u8u8<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_N>(buf3, offset_out, pub_seed);

        // memcpy(buf0 + SPX_N, addrx4 + 0*8, SPX_ADDR_BYTES);
        // memcpy(buf1 + SPX_N, addrx4 + 1*8, SPX_ADDR_BYTES);
        // memcpy(buf2 + SPX_N, addrx4 + 2*8, SPX_ADDR_BYTES);
        // memcpy(buf3 + SPX_N, addrx4 + 3*8, SPX_ADDR_BYTES);
        offset_out = SPX_N;
        buf0, _ = _x_memcpy_u8u32<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_ADDR_BYTES/4>(buf0, offset_out, addrx4[0:SPX_ADDR_BYTES/4]); 

        offset_out = SPX_N;
        buf1, _ = _x_memcpy_u8u32<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_ADDR_BYTES/4>(buf1, offset_out, addrx4[SPX_ADDR_BYTES/4:SPX_ADDR_BYTES/4]); 

        offset_out = SPX_N;
        buf2, _ = _x_memcpy_u8u32<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_ADDR_BYTES/4>(buf2, offset_out, addrx4[2*SPX_ADDR_BYTES/4:SPX_ADDR_BYTES/4]);

        offset_out = SPX_N;
        buf3, _ = _x_memcpy_u8u32<SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N, SPX_ADDR_BYTES/4>(buf3, offset_out, addrx4[3*SPX_ADDR_BYTES/4:SPX_ADDR_BYTES/4]);

        // shake256x4(bitmask0, bitmask1, bitmask2, bitmask3, inblocks * SPX_N, buf0, buf1, buf2, buf3, SPX_N + SPX_ADDR_BYTES);
        bitmask0, bitmask1, bitmask2, bitmask3 = _shake256x4<INBLOCKS*SPX_N, SPX_N + SPX_ADDR_BYTES>(buf0[0:SPX_N + SPX_ADDR_BYTES],
                                                                                                     buf1[0:SPX_N + SPX_ADDR_BYTES],
                                                                                                     buf2[0:SPX_N + SPX_ADDR_BYTES],
                                                                                                     buf3[0:SPX_N + SPX_ADDR_BYTES],
                                                                                                     bitmask0, bitmask1, bitmask2, bitmask3);

        // for (i = 0; i < inblocks * SPX_N; i++) {
        //     buf0[SPX_N + SPX_ADDR_BYTES + i] = in0[i] ^ bitmask0[i];
        //     buf1[SPX_N + SPX_ADDR_BYTES + i] = in1[i] ^ bitmask1[i];
        //     buf2[SPX_N + SPX_ADDR_BYTES + i] = in2[i] ^ bitmask2[i];
        //     buf3[SPX_N + SPX_ADDR_BYTES + i] = in3[i] ^ bitmask3[i];
        // }
        () = #unspill(in0, in1, in2, in3);
        for i=0 to INBLOCKS*SPX_N {
            t8 = in0[i]; t8 ^= bitmask0[i]; buf0[SPX_N + SPX_ADDR_BYTES + i] = t8; 
            t8 = in1[i]; t8 ^= bitmask1[i]; buf1[SPX_N + SPX_ADDR_BYTES + i] = t8;
            t8 = in2[i]; t8 ^= bitmask2[i]; buf2[SPX_N + SPX_ADDR_BYTES + i] = t8;
            t8 = in3[i]; t8 ^= bitmask3[i]; buf3[SPX_N + SPX_ADDR_BYTES + i] = t8;
        }

        // shake256x4(out0, out1, out2, out3, SPX_N, buf0, buf1, buf2, buf3, SPX_N + SPX_ADDR_BYTES + inblocks*SPX_N);
        () = #unspill(out0, out1, out2, out3);
        out0, out1, out2, out3 = _shake256x4<SPX_N, SPX_N + SPX_ADDR_BYTES + INBLOCKS*SPX_N>(buf0, buf1, buf2, buf3, out0, out1, out2, out3);
    }

    return out0, out1, out2, out3;
}//<>

#[returnaddress="stack"]
fn _thash<INBLOCKS>(
  reg ptr u8[SPX_N] out0,
  reg ptr u8[SPX_N] out1,
  reg ptr u8[SPX_N] out2,
  reg ptr u8[SPX_N] out3,
  reg ptr u8[INBLOCKS*SPX_N] in0,
  reg ptr u8[INBLOCKS*SPX_N] in1,
  reg ptr u8[INBLOCKS*SPX_N] in2,
  reg ptr u8[INBLOCKS*SPX_N] in3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[4*8] addrx4
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N] {
    out0, out1, out2, out3 = __thash<INBLOCKS>(out0, out1, out2, out3, in0, in1, in2, in3, pub_seed, addrx4);
    return out0, out1, out2, out3;
}//<>

require "../../../fips202x4/fips202_4x.jtmpl"
require "../../../memcpy/memcpy.jtmpl" // I have no idea why but without this import, the KeccakF1600_StatePermute4x_jazz export function is not the in the jpp

export fn KeccakF1600_StatePermute4x_jazz(reg u64 _state) {
  stack u256[25] state;

  inline int i;
  reg u256 t;

  for i=0 to 25 { t = (u256)[_state + 32*i]; state[i]=t; }
    
  state = _KeccakF1600_StatePermute4x(state);

  for i=0 to 25 { t = state[i]; (u256)[_state + 32*i] = t; }
}

export fn keccak_absorb4x_jazz<INLEN>(reg u64 _state _in0 _in1 _in2 _in3) 
{
  stack u256[25] state;
  stack u8[INLEN] in0 in1 in2 in3;
  reg u256 t;

  inline int i;

  for i=0 to 25 { t = (u256)[_state + 32*i]; state[i] = t; }
  
  for i=0 to INLEN {
    in0[i] = (u8)[_in0 + i];
    in1[i] = (u8)[_in1 + i];
    in2[i] = (u8)[_in2 + i];
    in3[i] = (u8)[_in3 + i];
  }

  () = #spill(_state);

  state = _shake256_absorb4x<INLEN>(state, in0, in1, in2, in3);

  () = #unspill(_state);

  for i=0 to 25 { t = state[i]; (u256)[_state + 32*i] = t; }
}//<>

export fn shake256_squeezeblocks_4x_jazz<OUTLEN>(reg u64 _h0 _h1 _h2 _h3 _state)
{
  stack u256[25] state;
  stack u8[OUTLEN] h0 h1 h2 h3;

  inline int i;
  reg u256 t;
  reg u8 u;

  for i=0 to OUTLEN { h0[i] = (u8)[_h0 + i];
                      h1[i] = (u8)[_h1 + i];
                      h2[i] = (u8)[_h2 + i];
                      h3[i] = (u8)[_h3 + i]; }

  for i=0 to 25 { t = (u256)[_state + 32*i]; state[i]=t; }
  
  () = #spill(_h0, _h1, _h2, _h3, _state);

  state, h0, h1, h2, h3 = _shake256_squeezeblocks_4x<OUTLEN>(state, h0, h1, h2, h3);

  () = #unspill(_h0, _h1, _h2, _h3, _state);

  for i=0 to OUTLEN { (u8)[_h0 + i] = h0[i];
                      (u8)[_h1 + i] = h1[i];
                      (u8)[_h2 + i] = h2[i];
                      (u8)[_h3 + i] = h3[i]; }


  for i=0 to 25 { t = state[i]; (u256)[_state + 32*i] = t; }
}//<>


// args is a (void *)
export fn shake256_x4_jazz<OUTLEN, INLEN>(reg u64 args) 
{
    reg u64 _in0 _in1 _in2 _in3;
    stack u8[INLEN] in0 in1 in2 in3;
    
    reg u64 _out0 _out1 _out2 _out3;
    stack u8[OUTLEN] out0 out1 out2 out3;

    reg u64 _state;
    stack u256[25] state;

    reg u64 offset;

    reg u8 t;

    inline int i;

    #declassify _in0 = (u64) [args + 8*0]; // pointers to the in arrays 
    #declassify _in1 = (u64) [args + 8*1]; // pointers to the in arrays
    #declassify _in2 = (u64) [args + 8*2]; // pointers to the in arrays
    #declassify _in3 = (u64) [args + 8*3]; // pointers to the in arrays

    #declassify _out0 = (u64) [args + 8*4]; // pointers to the out arrays
    #declassify _out1 = (u64) [args + 8*5]; // pointers to the out arrays
    #declassify _out2 = (u64) [args + 8*6]; // pointers to the out arrays
    #declassify _out3 = (u64) [args + 8*7]; // pointers to the out arrays

    // load in
    for i=0 to INLEN { in0[i] = (u8) [_in0 + i];
                       in1[i] = (u8) [_in1 + i];
                       in2[i] = (u8) [_in2 + i];
                       in3[i] = (u8) [_in3 + i]; }

    // load out (debug)
    for i=0 to OUTLEN { out0[i] = (u8) [_out0 + i];
                        out1[i] = (u8) [_out1 + i];
                        out2[i] = (u8) [_out2 + i];
                        out3[i] = (u8) [_out3 + i]; }

    () = #spill(_out0, _out1, _out2, _out3);

    out0, out1, out2, out3 = _shake256x4<OUTLEN, INLEN>(in0, in1, in2, in3, out0, out1, out2, out3);

    () = #unspill(_out0, _out1, _out2, _out3);

    // store out
    for i=0 to OUTLEN { (u8) [_out0 + i] = out0[i];
                        (u8) [_out1 + i] = out1[i];
                        (u8) [_out2 + i] = out2[i];
                        (u8) [_out3 + i] = out3[i]; }
}//<>

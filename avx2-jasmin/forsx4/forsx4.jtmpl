from Sphincs require "hash4x/hash.jtmpl"
from Sphincs require "hash/hash_shake.jtmpl"
from Sphincs require "utils/utils.jinc"

////////////////////////////////////////////////////////////////////////////////////////////////////

// NOTE: from ref-jasmin
inline fn __fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __prf_addr(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

#[returnaddress="stack"]
fn _fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __fors_gen_skx4(
  reg ptr u8[SPX_N] sk0,
  reg ptr u8[SPX_N] sk1,
  reg ptr u8[SPX_N] sk2,
  reg ptr u8[SPX_N] sk3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[4*8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  sk0, sk1, sk2, sk3 = _prf_addrx4(sk0, sk1, sk2, sk3, pub_seed, sk_seed, fors_leaf_addr);
  return sk0, sk1, sk2, sk3;
}

#[returnaddress="stack"]
fn _fors_gen_skx4(
  reg ptr u8[SPX_N] sk0,
  reg ptr u8[SPX_N] sk1,
  reg ptr u8[SPX_N] sk2,
  reg ptr u8[SPX_N] sk3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[4*8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  sk0, sk1, sk2, sk3 = __fors_gen_skx4(sk0, sk1, sk2, sk3, pub_seed, sk_seed, fors_leaf_addr);
  return sk0, sk1, sk2, sk3;
}

inline fn __fors_gen_skx4_(
  reg ptr u8[SPX_N] sk0,
  reg ptr u8[SPX_N] sk1,
  reg ptr u8[SPX_N] sk2,
  reg ptr u8[SPX_N] sk3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[4*8] fors_leaf_addr
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  sk0 = sk0;
  sk1 = sk1;
  sk2 = sk2;
  sk3 = sk3;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  sk0, sk1, sk2, sk3 = _fors_gen_skx4(sk0, sk1, sk2, sk3, pub_seed, sk_seed, fors_leaf_addr);

  sk0 = sk0;
  sk1 = sk1;
  sk2 = sk2;
  sk3 = sk3;

  return sk0, sk1, sk2, sk3;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// NOTE: from ref-jasmin
inline fn __fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk, // INBLOCKS = 1 so SPX_N * INBLOCKS = SPX_N
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __thash_<1>(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

#[returnaddress="stack"]
fn _fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

inline fn __fors_sk_to_leaf_(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = leaf;
  sk = sk;
  pub_seed = pub_seed;
  fors_leaf_addr = fors_leaf_addr;

  leaf = _fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  
  leaf = leaf;

  return leaf;
}

////////////////// SK TO LEAF BUT LEAF IS A REG U64 INSTEAD OF A REG PTR U8[SPX_N]

inline fn __fors_sk_to_leaf_in_u64(
  reg ptr u8[SPX_N] leaf,
  reg u64 sk, // reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __thash_in_u64_<1>(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

#[returnaddress="stack"]
fn _fors_sk_to_leaf_in_u64(
  reg ptr u8[SPX_N] leaf,
  reg u64 sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __fors_sk_to_leaf_in_u64(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

inline fn __fors_sk_to_leaf_in_u64_(
  reg ptr u8[SPX_N] leaf,
  reg u64 sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  leaf = _fors_sk_to_leaf_in_u64(leaf, sk, pub_seed, fors_leaf_addr);
  leaf = leaf;
  return leaf;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __fors_sk_to_leafx4(
  reg ptr u8[SPX_N] leaf0,
  reg ptr u8[SPX_N] leaf1,
  reg ptr u8[SPX_N] leaf2,
  reg ptr u8[SPX_N] leaf3,
  reg ptr u8[SPX_N] sk0, // INBLOCKS = 1 so SPX_N * INBLOCKS = SPX_N
  reg ptr u8[SPX_N] sk1,
  reg ptr u8[SPX_N] sk2,
  reg ptr u8[SPX_N] sk3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[4*8] fors_leaf_addrx4
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  leaf0, leaf1, leaf2, leaf3 = __thashx4<1>(leaf0, leaf1, leaf2, leaf3, 
                                            sk0, sk1, sk2, sk3, pub_seed, 
                                            fors_leaf_addrx4);
  return leaf0, leaf1, leaf2, leaf3;
}

#[returnaddress="stack"]
fn _fors_sk_to_leafx4(
  reg ptr u8[SPX_N] leaf0,
  reg ptr u8[SPX_N] leaf1,
  reg ptr u8[SPX_N] leaf2,
  reg ptr u8[SPX_N] leaf3,
  reg ptr u8[SPX_N] sk0,
  reg ptr u8[SPX_N] sk1,
  reg ptr u8[SPX_N] sk2,
  reg ptr u8[SPX_N] sk3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[4*8] fors_leaf_addrx4
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{
  leaf0, leaf1, leaf2, leaf3 = __fors_sk_to_leafx4(leaf0, leaf1, leaf2, leaf3, 
                                                   sk0, sk1, sk2, sk3, pub_seed, 
                                                   fors_leaf_addrx4);
  return leaf0, leaf1, leaf2, leaf3;
}

inline fn __fors_sk_to_leafx4_(
  reg ptr u8[SPX_N] leaf0,
  reg ptr u8[SPX_N] leaf1,
  reg ptr u8[SPX_N] leaf2,
  reg ptr u8[SPX_N] leaf3,
  reg ptr u8[SPX_N] sk0,
  reg ptr u8[SPX_N] sk1,
  reg ptr u8[SPX_N] sk2,
  reg ptr u8[SPX_N] sk3,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[4*8]  fors_leaf_addrx4
) -> reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N], reg ptr u8[SPX_N]
{ 
  leaf0 = leaf0; leaf1 = leaf1; leaf2 = leaf2; leaf3 = leaf3; 
  sk0 = sk0; sk1 = sk1; sk2 = sk2; sk3 = sk3; 
  pub_seed = pub_seed; fors_leaf_addrx4 = fors_leaf_addrx4;

  leaf0, leaf1, leaf2, leaf3 = _fors_sk_to_leafx4(leaf0, leaf1, leaf2, leaf3, sk0, sk1, sk2, sk3, pub_seed, fors_leaf_addrx4);

  leaf0 = leaf0; leaf1 = leaf1; leaf2 = leaf2; leaf3 = leaf3; 

  return leaf0, leaf1, leaf2, leaf3;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __fors_gen_leafx4(
  reg ptr u8[4*SPX_N] leaf,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 addr_idx,
  reg ptr u32[4*8] fors_leaf_addrx4
) -> reg ptr u8[4*SPX_N], reg ptr u32[4*8]
{
  inline int j;
  reg u32 t32;

  for j=0 to 4 {
    t32 = addr_idx;
    t32 += j;
    fors_leaf_addrx4[j*8 : 8] = __set_tree_index(fors_leaf_addrx4[j*8 : 8], t32);

    t32 = SPX_ADDR_TYPE_FORSPRF;
    fors_leaf_addrx4[j*8 : 8] = __set_type(fors_leaf_addrx4[j*8 : 8], t32);
  }

  () = #spill(fors_leaf_addrx4, pub_seed);

  leaf[0 : SPX_N], 
  leaf[SPX_N : SPX_N], 
  leaf[2*SPX_N : SPX_N], 
  leaf[3*SPX_N : SPX_N] = __fors_gen_skx4_(leaf[0 : SPX_N], leaf[SPX_N : SPX_N], leaf[2*SPX_N : SPX_N], leaf[3*SPX_N : SPX_N],
                                           pub_seed, sk_seed, fors_leaf_addrx4);  

  () = #unspill(fors_leaf_addrx4, pub_seed);
  
  for j=0 to 4 {
    t32 = SPX_ADDR_TYPE_FORSTREE;
    fors_leaf_addrx4[j*8 : 8] = __set_type(fors_leaf_addrx4[j*8 : 8], t32);
  }

  leaf[0 : SPX_N], leaf[SPX_N : SPX_N], leaf[2*SPX_N : SPX_N], leaf[3*SPX_N : SPX_N] = __thashx4_inplace(leaf[0 : SPX_N], 
                                                                                                         leaf[SPX_N : SPX_N], 
                                                                                                         leaf[2*SPX_N : SPX_N], 
                                                                                                         leaf[3*SPX_N : SPX_N],
                                                                                                         pub_seed, fors_leaf_addrx4);

  return leaf, fors_leaf_addrx4;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO: Treehash here

////////////////////////////////////////////////////////////////////////////////////////////////////

// NOTE: from ref-jasmin
inline fn __message_to_indices_t<MSG_LEN>(
  reg ptr u32[SPX_FORS_TREES] indices,
  reg ptr u8[MSG_LEN] m // Assumes m contains at least SPX_FORS_HEIGHT * SPX_FORS_TREES bits.
) -> reg ptr u32[SPX_FORS_TREES]
{
  reg u64 i j;

  reg u64 offset zero;
  reg u64 t u z v;

  ?{}, zero = #set0();
  offset = 0;

  ?{}, i = #set0();
  while (i < SPX_FORS_TREES)
  {
    indices[i] = zero;

    ?{}, j = #set0();
    while (j < SPX_FORS_HEIGHT)
    {
      // indices[i] ^= ((m[offset >> 3] >> (~offset & 0x7)) & 0x1) << (SPX_FORS_HEIGHT-1-j);
      t = offset;
      ?{}, t = #SHR(t, 3);

      u = offset;
      u = #NOT(u);
      u &= 0x7;

      z = (64u) m[t]; // only this line is different
      ?{}, z = #SHR(z, u);

      z &= 0x1;
      v = SPX_FORS_HEIGHT;
      v -= 1;
      v -= j;
      ?{}, z = #SHL(z, v);

      indices[i] ^= z;
      offset += 1;

      j += 1;
    }

    i += 1;
  }
  return indices;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __treehashx4_fors<INLEN>(
  reg ptr u8[INLEN] root,
  reg u64 offset,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[4*8] tree_addr,
  reg ptr u32[4*8] info
) ->  reg ptr u8[INLEN], // root
      reg ptr u32[4*8], // tree_addr
      reg ptr u32[4*8] // info
{ 
  stack u32 s_leaf_idx;
  stack u32 s_idx_offset;

  stack u8[4 * SPX_FORS_HEIGHT * SPX_N] nodes;
  
  stack u8[4 * SPX_N] current;
  reg ptr u8[SPX_N] current_0 current_1;

  stack u32 s_left_adj s_prev_left_adj; 
  reg u32 temp temp2;

  stack u32 s_idx s_internal_idx_offset s_internal_idx s_internal_leaf s_h;
  stack u64 s_h_spx_n;
  
  inline u32 max_idx; 
  reg u32 r_max_idx idx;
  inline int i;

  reg u64 out_offset in_offset t64;

  reg u32 zero addr;

  reg bool cond;

  #public stack u32 s_exit_outer_loop s_exit_inner_loop s_exit_inner_inner_loop returned; // TODO: Is this public ?

  s_left_adj = 0;
  s_prev_left_adj = 0;

  () = #spill(root, offset, auth_path, pub_seed, sk_seed, tree_addr, info);

  s_leaf_idx = leaf_idx;     // spill
  s_idx_offset = idx_offset; // spill

  max_idx = (1 << (SPX_FORS_HEIGHT-2)) - 1;

  // for (idx = 0;; idx++)
  s_idx = 0;
  s_exit_outer_loop = 0;
  returned = 0;
  while(s_exit_outer_loop == 0) {
    // gen_leafx4(current, ctx, 4*idx + idx_offset, info);
    temp = 4; temp *= s_idx; temp += s_idx_offset; // temp =  4 * idx + idx_offset // TODO: Replace (4*) with a shift
    () = #unspill(pub_seed, sk_seed, info);
    current, info = __fors_gen_leafx4(current, pub_seed, sk_seed, temp, info);
    () = #spill(info);

    // uint32_t internal_idx_offset = idx_offset;
    // uint32_t internal_idx = idx;
    // uint32_t internal_leaf = leaf_idx;
    temp = s_idx_offset; s_internal_idx_offset = temp;
    temp = s_idx; s_internal_idx = temp;
    temp = s_leaf_idx; s_internal_leaf = temp;

    // for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
    s_h = 0;
    s_h_spx_n = 0;
    s_exit_inner_loop = 0;

  } // end: C: for (idx = 0;; idx++) // Jasmin: while(s_exit_outer_loop == 0)
  while(s_exit_inner_loop == 0) {
    s_exit_inner_inner_loop = 0;

    if (s_h >= SPX_FORS_HEIGHT - 2) {
      if(s_h == SPX_FORS_HEIGHT) {
        // memcpy( root, &current[3*SPX_N], SPX_N ); return 
        
        () = #unspill(root, offset);

        out_offset = 0;
        current_1 = current[3*SPX_N : SPX_N];
        for i=0 to SPX_N { root[offset + i] = current_1[i];  }

        () = #spill(root);

        s_exit_inner_inner_loop = 1;
        s_exit_inner_loop = 1;
        s_exit_outer_loop = 1;
        returned = 1;
      }

      // i.e if we have not returned yet
      if (returned != 1) {
        // left_adj = 4 - (1 << (SPX_FORS_HEIGHT - h - 1));
        // temp  : (SPX_FORS_HEIGHT - h - 1)
        // temp2 : (1 << (SPX_FORS_HEIGHT - h - 1));
        temp = SPX_FORS_HEIGHT; temp -= s_h; temp -= 1;
        temp2 = 1;
        ?{}, temp2 = #SHL_32(temp2, temp);
        s_left_adj = 4; s_left_adj -= temp2;
      }
    }

    if (returned != 1) {
      if (s_h == SPX_FORS_HEIGHT) {
        // memcpy( root, &current[3*SPX_N], SPX_N ); return;
        () = #unspill(root, offset);

        out_offset = 0;
        current_1 = current[3*SPX_N : SPX_N];
        for i=0 to SPX_N { root[offset + i] = current_1[i];  }

        () = #spill(root);

        s_exit_inner_inner_loop = 1;
        s_exit_inner_loop = 1;
        s_exit_outer_loop = 1;
        returned = 1;
      }
    } 

    if (returned != 1) {
      // if ((((internal_idx << 2) ^ internal_leaf) & ~0x3) == 0) {
      //           memcpy( &auth_path[ h * SPX_N ],
      //                   &current[(((internal_leaf&3)^1) + prev_left_adj) * SPX_N],
      //                   SPX_N );
      // }
      temp = s_internal_idx;
      ?{}, temp = #SHL_32(temp, 2);
      temp ^= s_internal_leaf;
      temp2 = 0x3; temp2 = #NOT_32(temp2);
      temp &= temp2;

      if (temp == 0) {
        () = #unspill(auth_path);
        out_offset = s_h_spx_n;
        in_offset = (64u) s_internal_leaf; 
        in_offset &= 3;
        in_offset ^= 1;
        t64 = (64u) s_prev_left_adj;
        in_offset += t64;
        in_offset *= SPX_N;

        _, _ = _x_memcpy_u8pu8_2<4 * SPX_N>(auth_path, out_offset, current, in_offset, SPX_N);
      }

      // if ((internal_idx & 1) == 0 && idx < max_idx) { break; }
      temp = s_internal_idx; temp &= 1;
      zero = 0;
      idx = s_idx;
      r_max_idx = max_idx; 

      cond = __cond_u32_a_eq_b_and_c_below_d(temp, zero, idx, r_max_idx);

      if(cond) {
        s_exit_inner_loop = 1;
      } else {
        s_internal_idx_offset >>= 1;  

        for i=0 to 4 {
          () = #unspill(tree_addr);
          
          // set_tree_height(tree_addrx4 + j*8, h + 1);
          addr = s_h;
          addr += 1;
          tree_addr[i*8:8] = __set_tree_height(tree_addr[i*8:8], addr);

          // set_tree_index(tree_addrx4 + j*8, (4/2) * (internal_idx&~1) + j - left_adj + internal_idx_offset );

          () = #spill(tree_addr);
        }
      }
    }

    if( s_exit_inner_loop == 0 )
    {
      s_h += 1;
      s_h_spx_n += SPX_N;
      s_internal_idx >>= 1;
      s_internal_leaf >>= 1;
    }

    // memcpy( &stackx4[h * 4 * SPX_N], current, 4 * SPX_N); 
    out_offset = s_h_spx_n;
    out_offset *= 4;
    current_1 = current[0:SPX_N];   
    nodes, _ = _x_memcpy_u8u8<4*SPX_FORS_HEIGHT*SPX_N,SPX_N>(nodes,
                                                             out_offset,
                                                             current_1);

  } // end: C: for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
    // Jasmin: while(s_exit_inner_loop == 0)

  () = #unspill(root, tree_addr, info);

  return root, tree_addr, info;
}//<>

#[returnaddress="stack"]
fn _treehashx4_fors<INLEN>(
  reg ptr u8[INLEN] root,
  reg u64 offset,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[4*8] tree_addr,
  reg ptr u32[4*8] info
) -> reg ptr u8[INLEN], reg ptr u32[4*8], reg ptr u32[4*8]
{
  root, tree_addr, info = __treehashx4_fors<INLEN>(root,
                                                 offset,
                                                 auth_path,
                                                 pub_seed,
                                                 sk_seed,
                                                 leaf_idx,
                                                 idx_offset,
                                                 tree_addr,
                                                 info);
  return root, tree_addr, info;
}//<>

inline fn __treehashx4_fors_<INLEN>(
  reg ptr u8[INLEN] root, 
  reg u64 offset,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[4*8] tree_addr,
  reg ptr u32[4*8] info
) -> reg ptr u8[INLEN], reg ptr u32[4*8], reg ptr u32[4*8]
{
  root = root; offset = offset; auth_path = auth_path; pub_seed = pub_seed; sk_seed = sk_seed;
  leaf_idx = leaf_idx; idx_offset = idx_offset; tree_addr = tree_addr;
  info = info;

  root, tree_addr, info = _treehashx4_fors<INLEN>(root,
                                                  offset,
                                                  auth_path,
                                                  pub_seed,
                                                  sk_seed,
                                                  leaf_idx,
                                                  idx_offset,
                                                  tree_addr,
                                                  info);

  root = root;
  tree_addr = tree_addr;
  info = info;

  return root, tree_addr, info;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO: Fors sign here

////////////////////////////////////////////////////////////////////////////////////////////////////

// NOTE: From ref-jasmin
inline fn __fors_pk_from_sig(
  reg ptr u8[SPX_N] pk, // root
  reg u64 sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  /////////////////////////////////////////
  stack u64 s_sig;
  /////////////////////////////////////////
  
  stack u32[SPX_FORS_TREES] indices;
  reg ptr u32[SPX_FORS_TREES] indices_p;

  stack u8[SPX_FORS_TREES * SPX_N] roots;
  reg ptr u8[SPX_FORS_TREES * SPX_N] roots_p;
  
  stack u8[SPX_N] leaf;
  reg ptr u8[SPX_N] leaf_p;
  
  stack u32[8] fors_tree_addr;
  reg ptr u32[8] fors_tree_addr_p;
  
  stack u32[8] fors_pk_addr;
  reg ptr u32[8] fors_pk_addr_p;
  
  reg u32 idx_offset t;
  
  stack u32 s_idx_offset;
  
  inline int i;

  reg ptr u8[SPX_N] buf;

  reg u32 type height;

  reg u64 offset;

  ///////////////////////////// Initial spills (start from a clean state)
  s_sig = sig;
  () = #spill(pk, pub_seed, msg);
  /////////////////////////////

  fors_tree_addr_p = fors_tree_addr;
  fors_tree_addr_p = __zero_array_u32<8>(fors_tree_addr_p);
  fors_tree_addr = fors_tree_addr_p;

  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __zero_array_u32<8>(fors_pk_addr_p);
  fors_pk_addr = fors_pk_addr_p;

  // copy_keypair_addr(fors_tree_addr, fors_addr);
  fors_tree_addr_p = fors_tree_addr;
  fors_tree_addr_p = __copy_keypair_addr(fors_tree_addr_p, fors_addr);

  // copy_keypair_addr(fors_pk_addr, fors_addr);
  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __copy_keypair_addr(fors_pk_addr_p, fors_addr);
  fors_pk_addr = fors_pk_addr_p;
  
  // set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);
  type = SPX_ADDR_TYPE_FORSTREE;
  fors_tree_addr_p = __set_type(fors_tree_addr_p, type);
  fors_tree_addr = fors_tree_addr_p;

  // set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);
  type = SPX_ADDR_TYPE_FORSPK;
  fors_pk_addr_p = fors_pk_addr;
  fors_pk_addr_p = __set_type(fors_pk_addr_p, type);
  fors_pk_addr = fors_pk_addr_p;
  
  // message_to_indices(indices, m);
  () = #unspill(msg);
  indices_p = indices;
  indices = __message_to_indices_t<SPX_FORS_MSG_BYTES>(indices_p, msg);
  indices_p = indices;

  for i=0 to SPX_FORS_TREES {
    // idx_offset = i * (1 << SPX_FORS_HEIGHT);
    idx_offset = 1 << SPX_FORS_HEIGHT;
    idx_offset *= i;
    s_idx_offset = idx_offset; // spill
    
    // set_tree_height(fors_tree_addr, 0);
    fors_tree_addr_p = fors_tree_addr;
    height = 0;
    fors_tree_addr_p = __set_tree_height(fors_tree_addr_p, height);
    fors_tree_addr = fors_tree_addr_p;

    // set_tree_index(fors_tree_addr, indices[i] + idx_offset);
    t = indices[i];
    t += s_idx_offset;
    fors_tree_addr_p = fors_tree_addr;
    fors_tree_addr_p = __set_tree_index(fors_tree_addr_p, t);
    fors_tree_addr = fors_tree_addr_p;

    // fors_sk_to_leaf(leaf, sig, ctx, fors_tree_addr);
      sig = s_sig;
      () = #unspill(pub_seed);
      leaf_p = leaf;
      fors_tree_addr_p = fors_tree_addr;
    leaf_p = __fors_sk_to_leaf_in_u64_(leaf_p, sig, pub_seed, fors_tree_addr_p);
      leaf = leaf_p;
      sig = s_sig;
    
    // sig += SPX_N;
    s_sig += SPX_N;

    // compute_root(roots + i*SPX_N, leaf, indices[i], idx_offset, sig, SPX_FORS_HEIGHT, ctx, fors_tree_addr);
    t = indices[i];
    idx_offset = s_idx_offset;
    sig = s_sig;
    () = #unspill(pub_seed);
    offset = i; offset *= SPX_N;
    leaf_p = leaf;
    fors_tree_addr_p = fors_tree_addr;
    height = SPX_FORS_HEIGHT;
    roots, fors_tree_addr_p = __compute_root<SPX_FORS_TREES * SPX_N>(roots, offset, leaf_p, 
                                                                     t, idx_offset, sig, 
                                                                     height, pub_seed, 
                                                                     fors_tree_addr_p);
    fors_tree_addr = fors_tree_addr_p;
    s_sig += SPX_N * SPX_FORS_HEIGHT;
  }

  () = #unspill(pk, pub_seed);
  roots_p = roots;
  fors_pk_addr_p = fors_pk_addr;
  pk = __thash<SPX_FORS_TREES>(pk, roots_p, pub_seed, fors_pk_addr_p);
  return pk;
}

#[returnaddress="stack"]
fn _fors_pk_from_sig(
  reg ptr u8[SPX_N] pk, // root
  reg u64 sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  pk = __fors_pk_from_sig(pk, sig, msg, pub_seed, fors_addr);
  return pk;
}

inline fn __fors_pk_from_sig_(
  reg ptr u8[SPX_N] pk, // root
  reg u64 sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  pk = pk; sig = sig; msg = msg; pub_seed = pub_seed; fors_addr = fors_addr;

  pk = _fors_pk_from_sig(pk, sig, msg, pub_seed, fors_addr);

  pk = pk;
  return pk;
}
